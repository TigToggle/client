// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.6.0.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_205", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A, C,
  B = {
    L10nCs$() {
      return new B.L10nCs(A.canonicalizedLocale("cs"));
    },
    L10nCs: function L10nCs(t0) {
      this.localeName = t0;
    }
  };
  A = holdersList[0];
  C = holdersList[51];
  B = hunkHelpers.updateHolder(holdersList[10], B);
  B.L10nCs.prototype = {
    get$alwaysUse24HourFormat() {
      return "Vypnuto";
    },
    get$repeatPassword() {
      return "Zopakujte heslo";
    },
    get$notAnImage() {
      return "Nen\xed obr\xe1zek.";
    },
    get$remove(_) {
      return "Odstranit";
    },
    get$importNow() {
      return "Importovat nyn\xed";
    },
    get$importEmojis() {
      return "Importovat Emoji";
    },
    get$importFromZipFile() {
      return "Importovat ze .zip souboru";
    },
    get$exportEmotePack() {
      return "Exportovat Emoji jako .zip";
    },
    get$replace(_) {
      return "Nahradit";
    },
    aboutHomeserver$1(homeserver) {
      return "About " + homeserver;
    },
    get$accept(_) {
      return "P\u0159ijmout";
    },
    acceptedTheInvitation$1(username) {
      return "\ud83d\udc4d " + username + " p\u0159ijal/a pozv\xe1n\xed";
    },
    get$account() {
      return "\xda\u010det";
    },
    activatedEndToEndEncryption$1(username) {
      return "\ud83d\udd10 " + username + " aktivoval/a koncov\xe9 \u0161ifrov\xe1n\xed";
    },
    get$addEmail() {
      return "P\u0159idat e-mail";
    },
    get$confirmMatrixId() {
      return "Pros\xedm, potvr\u010fte va\u0161e Matrix ID, abyste mohli smazat v\xe1\u0161 \xfa\u010det.";
    },
    supposedMxid$1(mxid) {
      return "Tady by m\u011blo b\xfdt " + mxid;
    },
    get$addToSpace() {
      return "P\u0159idat do prostoru";
    },
    get$admin() {
      return "Spr\xe1vce";
    },
    get$alias() {
      return "alias";
    },
    get$all() {
      return "V\u0161e";
    },
    get$commandHint_googly() {
      return "Poslat krout\xedc\xed se o\u010di\u010dka";
    },
    get$commandHint_cuddle() {
      return "Poslat mazlen\xed";
    },
    get$commandHint_hug() {
      return "Poslat obejmut\xed";
    },
    googlyEyesContent$1(senderName) {
      return senderName + " v\xe1m pos\xedl\xe1 krout\xedc\xed se o\u010di\u010dka";
    },
    cuddleContent$1(senderName) {
      return senderName + " se s v\xe1mi mazl\xed";
    },
    hugContent$1(senderName) {
      return senderName + " v\xe1s obj\xedm\xe1";
    },
    answeredTheCall$1(senderName) {
      return senderName + " odpov\u011bd\u011bl na hovor";
    },
    get$anyoneCanJoin() {
      return "Kdokoliv se m\u016f\u017ee p\u0159ipojit";
    },
    get$archive() {
      return "Archivovat";
    },
    get$areGuestsAllowedToJoin() {
      return "Mohou se p\u0159ipojit host\xe9";
    },
    get$areYouSure() {
      return "Jste si jist\xfd?";
    },
    get$areYouSureYouWantToLogout() {
      return "Opravdu se chcete odhl\xe1sit?";
    },
    get$askSSSSSign() {
      return "Pro ov\u011b\u0159en\xed t\xe9to osoby zadejte pros\xedm p\u0159\xedstupovou fr\xe1zi k \u201ebezpe\u010dn\xe9mu \xfalo\u017ei\u0161ti\u201c anebo \u201ekl\xed\u010d pro obnovu\u201c.";
    },
    askVerificationRequest$1(username) {
      return "P\u0159ijmout \u017e\xe1dost o ov\u011b\u0159en\xed od " + username + "?";
    },
    badServerLoginTypesException$3(serverVersions, supportedVersions, suportedVersions) {
      return "Homeserver podporuje p\u0159ihl\xe1\u0161en\xed typu:\n" + serverVersions + "\nAle tato aplikace podporuje pouze:\n" + supportedVersions;
    },
    get$sendTypingNotifications() {
      return "Pos\xedlat ozn\xe1men\xed o psan\xed";
    },
    get$swipeRightToLeftToReply() {
      return "Pot\xe1hn\u011bte z prava do leva pro odpov\u011b\u010f";
    },
    get$sendOnEnter() {
      return "Odeslat p\u0159i vstupu";
    },
    badServerVersionsException$4(serverVersions, supportedVersions, serverVerions, suportedVersions) {
      return "Homeserver podporuje specifikaci verz\xed:\n" + serverVersions + "\nAle tato aplikace podporuje pouze verze " + supportedVersions;
    },
    countChatsAndCountParticipants$2(chats, participants) {
      return A.S(chats) + " konverzaci a " + A.S(participants) + " \xfa\u010dastn\xedci";
    },
    get$noMoreChatsFound() {
      return "\u017d\xe1dn\xe9 dal\u0161\xed konverzace nalezeny...";
    },
    get$noChatsFoundHere() {
      return "Nejsou zde \u017e\xe1dn\xe9 chaty. Za\u010dn\u011bte nov\xfd chat s n\u011bk\xfdm, pou\u017eit\xedm n\xed\u017ee uveden\xe9ho tla\u010d\xedtka. \u2935\ufe0f";
    },
    get$unread() {
      return "Nep\u0159e\u010dten\xe9";
    },
    get$space() {
      return "Prostor";
    },
    get$spaces() {
      return "Prostory";
    },
    get$banFromChat() {
      return "Zak\xe1zat chat";
    },
    get$banned() {
      return "Zak\xe1z\xe1n";
    },
    bannedUser$2(username, targetName) {
      return username + " zak\xe1zal " + targetName;
    },
    get$blockDevice() {
      return "Blokovat za\u0159\xedzen\xed";
    },
    get$blocked() {
      return "Zak\xe1z\xe1n";
    },
    get$botMessages() {
      return "Zpr\xe1vy od bota";
    },
    get$cancel(_) {
      return "Zru\u0161it";
    },
    cantOpenUri$1(uri) {
      return "Nelze otev\u0159\xedt URI " + uri;
    },
    get$changeDeviceName() {
      return "Zm\u011bnit n\xe1zev za\u0159\xedzen\xed";
    },
    changedTheChatAvatar$1(username) {
      return username + " zm\u011bnil avatar chatu";
    },
    changedTheChatDescriptionTo$2(username, description) {
      return username + " zm\u011bnil popis chatu na: \u201e" + description + "\u201c";
    },
    changedTheChatNameTo$2(username, chatname) {
      return username + " zm\u011bnil jm\xe9no chatu na: \u201e" + chatname + "\u201c";
    },
    changedTheChatPermissions$1(username) {
      return username + " zm\u011bnili nastaven\xed opr\xe1vn\u011bn\xed v chatu";
    },
    changedTheDisplaynameTo$2(username, displayname) {
      return username + " zm\u011bnili svoji p\u0159ezd\xedvku na: " + displayname;
    },
    changedTheGuestAccessRules$1(username) {
      return username + " zm\u011bnili p\u0159\xedstupov\xe1 pr\xe1va pro hosty";
    },
    changedTheGuestAccessRulesTo$2(username, rules) {
      return username + " zm\u011bnili p\u0159\xedstupov\xe1 pr\xe1va pro hosty na: " + rules;
    },
    changedTheHistoryVisibility$1(username) {
      return username + " zm\u011bnili nastaven\xed viditelnosti historie diskuze";
    },
    changedTheHistoryVisibilityTo$2(username, rules) {
      return username + " zm\u011bnili nastaven\xed viditelnosti historie diskuze na: " + rules;
    },
    changedTheJoinRules$1(username) {
      return username + " zm\u011bnili nastaven\xed pravidel p\u0159ipojen\xed";
    },
    changedTheJoinRulesTo$2(username, joinRules) {
      return username + " zm\u011bnili nastaven\xed pravidel p\u0159ipojen\xed na: " + joinRules;
    },
    changedTheProfileAvatar$1(username) {
      return username + " zm\u011bnili sv\u016fj avatar";
    },
    changedTheRoomAliases$1(username) {
      return username + " zm\u011bnili nastaven\xed alias\u016f m\xedstnosti";
    },
    changedTheRoomInvitationLink$1(username) {
      return username + " zm\u011bnili odkaz k pozv\xe1n\xed do m\xedstnosti";
    },
    get$changePassword() {
      return "Zm\u011bnit heslo";
    },
    get$changeTheme() {
      return "Zm\u011b\u0148te sv\u016fj styl";
    },
    get$changeTheNameOfTheGroup() {
      return "Zm\u011bnit n\xe1zev skupiny";
    },
    get$changeYourAvatar() {
      return "Zm\u011b\u0148te sv\u016fj avatar";
    },
    get$channelCorruptedDecryptError() {
      return "\u0160ifrov\xe1n\xed bylo po\u0161kozeno";
    },
    get$chat() {
      return "Chat";
    },
    get$chatDetails() {
      return "Bli\u017e\u0161\xed \xfadaje o chatu";
    },
    get$chats() {
      return "Chaty";
    },
    get$chooseAStrongPassword() {
      return "Vyberte siln\xe9 heslo";
    },
    get$clearArchive() {
      return "Vymazat archiv";
    },
    get$close(_) {
      return "Zav\u0159\xedt";
    },
    get$commandHint_markasdm() {
      return "Ozna\u010dit jako m\xedstnost p\u0159\xedm\xe9 konverzace s dan\xfdm Matrix ID";
    },
    get$commandHint_markasgroup() {
      return "Ozna\u010dit jako skupinu";
    },
    get$commandHint_ban() {
      return "Zak\xe1zat dan\xe9mu u\u017eivateli p\u0159\xedstup do t\xe9to m\xedstnosti";
    },
    get$commandHint_clearcache() {
      return "Vymazat mezipam\u011bt";
    },
    get$commandHint_create() {
      return "Vytvo\u0159te pr\xe1zdn\xfd skupinov\xfd chat\n K deaktivaci \u0161ifrov\xe1n\xed pou\u017eijte --no-encryption";
    },
    get$commandHint_discardsession() {
      return "Zahodit relaci";
    },
    get$commandHint_dm() {
      return "Zahajte p\u0159\xedm\xfd chat\nK deaktivaci \u0161ifrov\xe1n\xed pou\u017eijte --no-encryption";
    },
    get$commandHint_html() {
      return "Odeslat text ve form\xe1tu HTML";
    },
    get$commandHint_invite() {
      return "Pozv\u011bte dan\xe9ho u\u017eivatele do t\xe9to m\xedstnosti";
    },
    get$commandHint_join() {
      return "P\u0159ipojte se k dan\xe9 m\xedstnosti";
    },
    get$commandHint_kick() {
      return "Odeberte dan\xe9ho u\u017eivatele z t\xe9to m\xedstnosti";
    },
    get$commandHint_leave() {
      return "Opus\u0165te tuto m\xedstnost";
    },
    get$commandHint_me() {
      return "P\u0159edstav se";
    },
    get$commandHint_myroomavatar() {
      return "Nastavte si obr\xe1zek pro tuto m\xedstnost (autor mxc-uri)";
    },
    get$commandHint_myroomnick() {
      return "Nastavte si v\xe1\u0161 zobrazovan\xfd n\xe1zev pro tuto m\xedstnost";
    },
    get$commandHint_op() {
      return "Nastavit \xfarove\u0148 pr\xe1v dan\xe9ho u\u017eivatele (v\xfdchoz\xed: 50)";
    },
    get$commandHint_plain() {
      return "Odeslat neform\xe1tovan\xfd text";
    },
    get$commandHint_react() {
      return "Odeslat odpov\u011b\u010f jako reakci";
    },
    get$commandHint_send() {
      return "Poslat zpr\xe1vu";
    },
    get$commandHint_unban() {
      return "Zru\u0161te z\xe1kaz p\u0159\xedstupu dan\xe9ho u\u017eivatele do t\xe9to m\xedstnosti";
    },
    get$commandInvalid() {
      return "P\u0159\xedkaz je neplatn\xfd";
    },
    commandMissing$1(command) {
      return command + " nen\xed p\u0159\xedkaz.";
    },
    get$compareEmojiMatch() {
      return "Porovnejte a p\u0159esv\u011bd\u010dete se, \u017ee n\xe1sleduj\xedc\xed emotikony se shoduj\xed na obou za\u0159\xedzen\xedch:";
    },
    get$compareNumbersMatch() {
      return "Porovnejte a p\u0159esv\u011bd\u010dete se, \u017ee n\xe1sleduj\xedc\xed \u010d\xedsla se shoduj\xed na obou za\u0159\xedzen\xedch:";
    },
    get$configureChat() {
      return "Nastaven\xed chatu";
    },
    get$confirm(_) {
      return "Potvrdit";
    },
    get$containsDisplayName() {
      return "Obsahuje zobrazovan\xfd n\xe1zev";
    },
    get$containsUserName() {
      return "Obsahuje u\u017eivatelsk\xe9 jm\xe9no";
    },
    get$contentHasBeenReported() {
      return "Obsah byl nahl\xe1\u0161en spr\xe1vc\u016fm serveru";
    },
    get$copiedToClipboard() {
      return "Zkop\xedrov\xe1no do schr\xe1nky";
    },
    get$copy(_) {
      return "Kop\xedrovat";
    },
    couldNotDecryptMessage$1(error) {
      return "Nebylo mo\u017en\xe9 de\u0161ifrovat zpr\xe1vu: " + error;
    },
    countParticipants$1(count) {
      return A.S(count) + " \xfa\u010dastn\xedk\u016f";
    },
    createdTheChat$1(username) {
      return "\ud83d\udcac " + username + " zalo\u017eil/a chat";
    },
    get$currentlyActive() {
      return "Aktu\xe1ln\u011b aktivn\xed";
    },
    get$darkTheme() {
      return "Tmav\xe9";
    },
    dateAndTimeOfDay$2(date, timeOfDay) {
      return date + ", " + timeOfDay;
    },
    get$deactivateAccountWarning() {
      return "T\xedmto krokem se deaktivuje v\xe1\u0161 u\u017eivatelsk\xfd \xfa\u010det. Akci nelze vr\xe1tit zp\u011bt! Jste si jist\xed?";
    },
    get$defaultPermissionLevel() {
      return "V\xfdchoz\xed \xfarove\u0148 opr\xe1vn\u011bn\xed nov\xfdch u\u017eivatel\u016f";
    },
    get$$delete(_) {
      return "Smazat";
    },
    get$deleteAccount() {
      return "Smazat \xfa\u010det";
    },
    get$deleteMessage() {
      return "Smazat zpr\xe1vu";
    },
    get$devices() {
      return "Za\u0159\xedzen\xed";
    },
    get$directChats() {
      return "P\u0159\xedm\xe9 chatov\xe1n\xed";
    },
    get$allRooms() {
      return "V\u0161echny skupinov\xe9 konverzace";
    },
    get$displaynameHasBeenChanged() {
      return "P\u0159ezd\xedvka byla zm\u011bn\u011bna";
    },
    get$downloadFile() {
      return "St\xe1hnout soubor";
    },
    get$edit() {
      return "Upravit";
    },
    get$editBlockedServers() {
      return "Upravit zak\xe1zan\xe9 servery";
    },
    get$chatPermissions() {
      return "Opr\xe1vn\u011bn\xed konverzace";
    },
    get$editChatPermissions() {
      return "Edit chat permissions";
    },
    get$editDisplayname() {
      return "Zm\u011bnit p\u0159ezd\xedvku";
    },
    get$editRoomAliases() {
      return "Upravit aliasy m\xedstnost\xed";
    },
    get$editRoomAvatar() {
      return "Upravit avatara m\xedstnosti";
    },
    get$emoteExists() {
      return "Emotikona ji\u017e existuje!";
    },
    get$emoteInvalid() {
      return "Neplatn\xfd k\xf3d emotikony!";
    },
    get$emoteKeyboardNoRecents() {
      return "Naposledy pou\u017eit\xe9 emoce se zobraz\xed zde...";
    },
    get$emotePacks() {
      return "Bal\xed\u010dek emotikon\u016f pro m\xedstnost";
    },
    get$globalChatId() {
      return "Glob\xe1ln\xed ID chatu";
    },
    get$accessAndVisibility() {
      return "P\u0159\xedstup a viditelnost";
    },
    get$customEmojisAndStickers() {
      return "Vlastn\xed emoji a n\xe1lepky";
    },
    get$emoteShortcode() {
      return "Kl\xe1vesov\xe1 zkratka emotikonu";
    },
    get$emoteWarnNeedToPick() {
      return "Mus\xedte si vybrat kl\xe1vesovou zkratku emotikonu a obr\xe1zek!";
    },
    get$emptyChat() {
      return "Pr\xe1zdn\xfd chat";
    },
    get$enableEmotesGlobally() {
      return "Povolit bal\xed\u010dek emotikon v\u0161ude";
    },
    get$enableEncryption() {
      return "Povolit \u0161ifrov\xe1n\xed";
    },
    get$encrypted() {
      return "\u0160ifrov\xe1no";
    },
    get$encryptionNotEnabled() {
      return "\u0160ifrov\xe1n\xed nen\xed aktivn\xed";
    },
    endedTheCall$1(senderName) {
      return senderName + " ukon\u010dil hovor";
    },
    get$enterAnEmailAddress() {
      return "Zadejte e-mailovou adresu";
    },
    errorObtainingLocation$1(error) {
      return "Chyba p\u0159i z\xedsk\xe1v\xe1n\xed polohy: " + error;
    },
    get$extremeOffensive() {
      return "Extr\xe9mn\u011b ur\xe1\u017eliv\xe9";
    },
    get$fontSize(_) {
      return "Velikost p\xedsma";
    },
    get$forward(_) {
      return "P\u0159eposlat";
    },
    get$fromJoining() {
      return "Od vstupu";
    },
    get$fromTheInvitation() {
      return "Od pozv\xe1n\xed";
    },
    get$goToTheNewRoom() {
      return "P\u0159ej\xedt do nov\xe9 m\xedstnost";
    },
    get$group() {
      return "Skupina";
    },
    get$chatDescription() {
      return "Popis konverzace";
    },
    get$groups() {
      return "Skupiny";
    },
    groupWith$1(displayname) {
      return "Skupina s " + displayname;
    },
    get$guestsAreForbidden() {
      return "Host\xe9 jsou zak\xe1z\xe1ni";
    },
    get$guestsCanJoin() {
      return "Host\xe9 se mohou p\u0159ipojit";
    },
    hasWithdrawnTheInvitationFor$2(username, targetName) {
      return username + " st\xe1hl pozv\xe1nku pro " + targetName;
    },
    get$help() {
      return "Pomoc";
    },
    get$hideRedactedMessages() {
      return "Skr\xfdt upraven\xe9 zpr\xe1vy";
    },
    get$hideRedactedMessagesBody() {
      return "Pokud n\u011bkdo zpr\xe1vu zrediguje, nebude tato zpr\xe1va v chatu ji\u017e viditeln\xe1.";
    },
    get$hideInvalidOrUnknownMessageFormats() {
      return "Skryt\xed nespr\xe1vn\xfdch nebo nezn\xe1m\xfdch form\xe1t\u016f zpr\xe1v";
    },
    get$howOffensiveIsThisContent() {
      return "Jak ur\xe1\u017eliv\xfd je tento obsah?";
    },
    get$block() {
      return "Blokovat";
    },
    get$blockedUsers() {
      return "Zablokov\xe1n\xed u\u017eivatel\xe9";
    },
    get$blockListDescription() {
      return "M\u016f\u017eete blokovat u\u017eivatele, kte\u0159\xed v\xe1s obt\u011b\u017euj\xed. Od u\u017eivatel\u016f na va\u0161em osobn\xedm seznamu blokovan\xfdch u\u017eivatel\u016f nebudete moci p\u0159ij\xedmat \u017e\xe1dn\xe9 zpr\xe1vy ani pozv\xe1nky do m\xedstnosti.";
    },
    get$blockUsername() {
      return "Ignorovat u\u017eivatelsk\xe9 jm\xe9no";
    },
    get$iHaveClickedOnLink() {
      return "Klikl jsem na odkaz";
    },
    get$incorrectPassphraseOrKey() {
      return "Nespr\xe1vn\xe9 p\u0159\xedstupov\xe9 heslo anebo kl\xed\u010d pro obnovu";
    },
    get$inoffensive() {
      return "Ne\u0161kodn\xfd";
    },
    get$inviteContact() {
      return "Pozvat kontakt";
    },
    get$noChatDescriptionYet() {
      return "Zat\xedm nebyl vytvo\u0159en \u017e\xe1dn\xfd popis konverzace.";
    },
    get$tryAgain() {
      return "Zkuste to znovu";
    },
    get$invited() {
      return "Pozvan\xfd";
    },
    get$redactMessageDescription() {
      return "Tato zpr\xe1va bude smaz\xe1na pro v\u0161echny \xfa\u010dastn\xedky konverzace. Tuto akci nelze vz\xedt zp\u011bt.";
    },
    get$optionalRedactReason() {
      return "(Nepovinn\xe9) D\u016fvod smaz\xe1n\xed t\xe9to zpr\xe1vy\u2026";
    },
    invitedUser$2(username, targetName) {
      return "\ud83d\udce9 " + username + " pozval/a " + targetName;
    },
    get$invitedUsersOnly() {
      return "Pouze pozvan\xed u\u017eivatel\xe9";
    },
    get$inviteForMe() {
      return "Pozv\u011bte m\u011b";
    },
    inviteText$2(username, link) {
      return username + " v\xe1s pozvali na FluffyChat.\n1. Nav\u0161tivte fluffychat.im a nainstalujte si aplikaci.\n2. Zaregistrujte se anebo se p\u0159ihla\u0161te.\n3. Otev\u0159ete pozv\xe1nku: \n " + link;
    },
    get$isTyping() {
      return "p\xed\u0161e\u2026";
    },
    joinedTheChat$1(username) {
      return "\ud83d\udc4b " + username + " se p\u0159ipojil/a k chatu";
    },
    get$joinRoom() {
      return "P\u0159ipojte se k m\xedstnosti";
    },
    kicked$2(username, targetName) {
      return "\ud83d\udc5e " + username + " vyhodil/a " + targetName;
    },
    get$kickFromChat() {
      return "Vyhodit z chatu";
    },
    lastActiveAgo$1(localizedTimeShort) {
      return "Naposledy aktivn\xed: " + localizedTimeShort;
    },
    get$leave() {
      return "Opustit";
    },
    get$leftTheChat() {
      return "Opustil chat";
    },
    get$lightTheme() {
      return "Sv\u011btl\xe9";
    },
    loadCountMoreParticipants$1(count) {
      return "Na\u010d\xedst dal\u0161\xedch " + count + " \xfa\u010dastn\xedk\u016f";
    },
    get$dehydrate() {
      return "Exportovat sezen\xed a promazat za\u0159\xedzen\xed";
    },
    get$dehydrateWarning() {
      return "Tuto akci nelze vz\xedt zp\u011bt. Ujist\u011bte se \u017ee z\xe1lo\u017en\xed soubor m\xe1te bezpe\u010dn\u011b ulo\u017een.";
    },
    get$dehydrateTor() {
      return "TOR u\u017eivatel\xe9: Export sezen\xed";
    },
    get$dehydrateTorLong() {
      return "U\u017eivatel\u016fm TOR se doporu\u010duje exportovat sezen\xed p\u0159ed zav\u0159en\xedm okna.";
    },
    get$loadingPleaseWait() {
      return "Na\u010d\xedt\xe1n\xed\u2026 Pros\xedme vy\u010dkejte.";
    },
    get$loadMore() {
      return "Na\u010d\xedst dal\u0161\xed\u2026";
    },
    get$locationDisabledNotice() {
      return "Slu\u017eby ur\u010dov\xe1n\xed polohy jsou deaktivov\xe1ny. Povolte jim, aby mohli sd\xedlet va\u0161i polohu.";
    },
    get$locationPermissionDeniedNotice() {
      return "Opr\xe1vn\u011bn\xed k poloze odep\u0159eno. Ud\u011blte jim pros\xedm mo\u017enost sd\xedlet va\u0161i polohu.";
    },
    get$logout() {
      return "Odhl\xe1sit";
    },
    get$memberChanges() {
      return "Zm\u011bny \u010dlen\u016f";
    },
    get$mention() {
      return "Zm\xednit se";
    },
    get$messages() {
      return "Zpr\xe1vy";
    },
    get$messagesStyle() {
      return "Zpr\xe1vy:";
    },
    get$moderator() {
      return "Moder\xe1tor";
    },
    get$newChat() {
      return "Nov\xfd chat";
    },
    get$newVerificationRequest() {
      return "Nov\xe1 \u017e\xe1dost o ov\u011b\u0159en\xed!";
    },
    get$next(_) {
      return "Dal\u0161\xed";
    },
    get$no() {
      return "Ne";
    },
    get$noConnectionToTheServer() {
      return "\u017d\xe1dn\xe9 p\u0159ipojen\xed k serveru";
    },
    get$noEmotesFound() {
      return "Nebyly nalezeny \u017e\xe1dn\xe9 emotikony. \ud83d\ude15";
    },
    get$shareInviteLink() {
      return "Sd\xedlet pozv\xe1nku";
    },
    get$noPasswordRecoveryDescription() {
      return "Dosud jste nep\u0159idali zp\u016fsob, jak obnovit sv\xe9 heslo.";
    },
    get$noPermission() {
      return "Chyb\xed opr\xe1vn\u011bn\xed";
    },
    get$noRoomsFound() {
      return "Nebyly nalezeny \u017e\xe1dn\xe9 m\xedstnosti\u2026";
    },
    get$notifications() {
      return "Ozn\xe1men\xed";
    },
    get$notificationsEnabledForThisAccount() {
      return "Ozn\xe1men\xed povolena pro tento \xfa\u010det";
    },
    get$obtainingLocation() {
      return "Z\xedsk\xe1v\xe1n\xed polohy\u2026";
    },
    get$offensive() {
      return "Ur\xe1\u017eliv\xe9";
    },
    get$ok() {
      return "Ok";
    },
    get$oopsSomethingWentWrong() {
      return "Jejda, n\u011bco se pokazilo\u2026";
    },
    get$oneClientLoggedOut() {
      return "Jeden z va\u0161ich klient\u016f byl odhl\xe1\u0161en";
    },
    get$addAccount() {
      return "P\u0159idat \xfa\u010det";
    },
    get$enableMultiAccounts() {
      return "(BETA) Na tomto za\u0159\xedzen\xed povolte v\xedce \xfa\u010dt\u016f";
    },
    get$openInMaps() {
      return "Otev\u0159\xedt v map\xe1ch";
    },
    get$link() {
      return "Odkaz";
    },
    get$serverRequiresEmail() {
      return "Tento server pot\u0159ebuje k registraci ov\u011b\u0159it va\u0161i e -mailovou adresu.";
    },
    get$or() {
      return "Nebo";
    },
    get$participant() {
      return "\xda\u010dastn\xedk";
    },
    get$passphraseOrKey() {
      return "heslo nebo kl\xed\u010d pro obnoven\xed";
    },
    get$password(_) {
      return "Heslo";
    },
    get$passwordHasBeenChanged() {
      return "Heslo bylo zm\u011bn\u011bno";
    },
    get$overview() {
      return "P\u0159ehled";
    },
    get$notifyMeFor() {
      return "Upozorn\u011bte m\u011b na";
    },
    get$passwordRecoverySettings() {
      return "Nastaven\xed obnoven\xed hesla";
    },
    get$passwordRecovery() {
      return "Obnova hesla";
    },
    get$pickImage() {
      return "Zvolit obr\xe1zek";
    },
    get$pin() {
      return "P\u0159ipnout zpr\xe1vu";
    },
    get$pleaseChoose() {
      return "Pros\xedm vyberte si";
    },
    get$pleaseClickOnLink() {
      return "Klikn\u011bte na odkaz v e-mailu a pokra\u010dujte.";
    },
    get$pleaseEnterYourPassword() {
      return "Zadejte pros\xedm sv\xe9 heslo";
    },
    get$pleaseEnterYourPin() {
      return "Zadejte sv\u016fj PIN";
    },
    get$pleaseEnterYourUsername() {
      return "Zadejte pros\xedm sv\xe9 u\u017eivatelsk\xe9 jm\xe9no";
    },
    get$pleaseFollowInstructionsOnWeb() {
      return "Postupujte podle pokyn\u016f na webu a klepn\u011bte na dal\u0161\xed.";
    },
    get$privacy() {
      return "Soukrom\xed";
    },
    get$reason(_) {
      return "D\u016fvod";
    },
    redactedBy$1(username) {
      return "Smaz\xe1no u\u017eivatelem " + username;
    },
    get$directChat() {
      return "P\u0159\xedm\xe1 konverzace";
    },
    redactedByBecause$2(username, reason) {
      return "Smaz\xe1no u\u017eivatelem " + username + ' s d\u016fvodem: "' + reason + '"';
    },
    redactedAnEvent$1(username) {
      return username + " opravili ud\xe1lost";
    },
    get$redactMessage() {
      return "Redigovat zpr\xe1vu";
    },
    get$reject() {
      return "Zam\xedtnout";
    },
    rejectedTheInvitation$1(username) {
      return username + " odm\xedtli pozv\xe1n\xed";
    },
    get$removeAllOtherDevices() {
      return "Odstranit v\u0161echna dal\u0161\xed za\u0159\xedzen\xed";
    },
    get$unbanFromChat() {
      return "Zru\u0161it z\xe1kaz chatu";
    },
    get$removeYourAvatar() {
      return "Odstra\u0148te sv\xe9ho avatara";
    },
    get$replaceRoomWithNewerVersion() {
      return "Nahradit m\xedstnost novou verz\xed";
    },
    get$reply(_) {
      return "Odpov\u011bd\u011bt";
    },
    get$reportMessage() {
      return "Nahl\xe1sit zpr\xe1vu";
    },
    get$roomHasBeenUpgraded() {
      return "M\xedstnost byla upgradov\xe1na";
    },
    get$roomVersion() {
      return "Verze m\xedstnosti";
    },
    get$search(_) {
      return "Hledat";
    },
    get$security() {
      return "Bezpe\u010dnostn\xed";
    },
    get$send(_) {
      return "Odeslat";
    },
    get$sendAsText() {
      return "Odeslat jako text";
    },
    get$sendAudio() {
      return "Odeslat audio";
    },
    get$sendFile() {
      return "Odeslat soubor";
    },
    get$sendImage() {
      return "Odeslat obr\xe1zek";
    },
    sendImages$1(count) {
      return "Send " + count + " image";
    },
    get$sendMessages() {
      return "Odeslat zpr\xe1vy";
    },
    get$sendVideo() {
      return "Odeslat video";
    },
    sentAFile$1(username) {
      return username + " poslali soubor";
    },
    sentAnAudio$1(username) {
      return username + " poslali zvukovou nahr\xe1vku";
    },
    sentAPicture$1(username) {
      return username + " poslali obr\xe1zek";
    },
    sentASticker$1(username) {
      return username + " poslali samolepku";
    },
    sentAVideo$1(username) {
      return username + " poslali video";
    },
    sentCallInformations$1(senderName) {
      return senderName + " odeslal informace o hovoru";
    },
    get$separateChatTypes() {
      return "Odd\u011b\u013alit p\u0159\xedm\xe9 chaty, skupiny a prostory";
    },
    get$setAsCanonicalAlias() {
      return "Nastavit jako hlavn\xed alias";
    },
    get$setChatDescription() {
      return "Nastavit popis konverzace";
    },
    get$setPermissionsLevel() {
      return "Nastavit \xfarove\u0148 opr\xe1vn\u011bn\xed";
    },
    get$settings() {
      return "Nastaven\xed";
    },
    get$share(_) {
      return "Sd\xedlet";
    },
    sharedTheLocation$1(username) {
      return username + " sd\xedlel jejich polohu";
    },
    get$shareLocation() {
      return "Sd\xedlet polohu";
    },
    get$presencesToggle() {
      return "Zobrazen\xed stavov\xfdch zpr\xe1v od jin\xfdch u\u017eivatel\u016f";
    },
    get$skip(_) {
      return "P\u0159esko\u010dit";
    },
    get$sourceCode() {
      return "Zdrojov\xe9 k\xf3dy";
    },
    get$spaceName() {
      return "N\xe1zev prostoru";
    },
    startedACall$1(senderName) {
      return senderName + " zah\xe1jil hovor";
    },
    get$status(_) {
      return "Stav";
    },
    get$submit(_) {
      return "Odeslat";
    },
    get$synchronizingPleaseWait() {
      return "Synchronizace ... \u010cekejte pros\xedm.";
    },
    get$systemTheme() {
      return "T\xe9ma syst\xe9mu";
    },
    get$theyDontMatch() {
      return "Neshoduj\xed se";
    },
    get$theyMatch() {
      return "Shoduj\xed se";
    },
    get$tooManyRequestsWarning() {
      return "P\u0159\xedli\u0161 mnoho po\u017eadavk\u016f. Pros\xedm zkuste to znovu pozd\u011bji!";
    },
    get$tryToSendAgain() {
      return "Zkuste odeslat znovu";
    },
    get$unavailable() {
      return "Nedostupn\xed";
    },
    unbannedUser$2(username, targetName) {
      return username + " zru\u0161ili z\xe1kaz pro " + targetName;
    },
    get$unblockDevice() {
      return "Odblokovat za\u0159\xedzen\xed";
    },
    get$unknownDevice() {
      return "Nezn\xe1m\xe9 za\u0159\xedzen\xed";
    },
    get$unknownEncryptionAlgorithm() {
      return "Nezn\xe1m\xfd \u0161ifrovac\xed algoritmus";
    },
    unknownEvent$1(type) {
      return "Nezn\xe1m\xe1 ud\xe1lost \u201e" + type + "\u201c";
    },
    get$unpin() {
      return "Odepnout zpr\xe1vu";
    },
    userAndOthersAreTyping$2(username, count) {
      return username + " a " + count + " dal\u0161\xedch p\xed\u0161\xed\u2026";
    },
    userAndUserAreTyping$2(username, username2) {
      return username + " a " + username2 + " p\xed\u0161\xed\u2026";
    },
    userIsTyping$1(username) {
      return username + " p\xed\u0161e\u2026";
    },
    userLeftTheChat$1(username) {
      return username + " opustili chat";
    },
    get$username(_) {
      return "U\u017eivatelsk\xe9 jm\xe9no";
    },
    userSentUnknownEvent$2(username, type) {
      return username + " poslali ud\xe1lost " + type;
    },
    get$unverified() {
      return "Neov\u011b\u0159eno";
    },
    get$verified() {
      return "Ov\u011b\u0159eno";
    },
    get$verifyStart() {
      return "Zah\xe1jit ov\u011b\u0159en\xed";
    },
    get$verifySuccess() {
      return "Ov\u011b\u0159en\xed prob\u011bhlo \xfasp\u011b\u0161n\u011b!";
    },
    get$verifyTitle() {
      return "Ov\u011b\u0159uji druh\xfd \xfa\u010det";
    },
    get$visibilityOfTheChatHistory() {
      return "Viditelnost historie chatu";
    },
    get$visibleForAllParticipants() {
      return "Viditeln\xe9 pro v\u0161echny \xfa\u010dastn\xedc\xed se";
    },
    get$visibleForEveryone() {
      return "Viditeln\xe9 pro v\u0161echny";
    },
    get$voiceMessage() {
      return "Hlasov\xe1 zpr\xe1va";
    },
    get$waitingPartnerAcceptRequest() {
      return "\u010cek\xe1 se na potvrzen\xed \u017e\xe1dosti partnerem\u2026";
    },
    get$waitingPartnerEmoji() {
      return "\u010cek\xe1 se na potvrzen\xed emoji partnerem\u2026";
    },
    get$waitingPartnerNumbers() {
      return "\u010cek\xe1n\xed na partnera a\u017e p\u0159ijme \u010d\xedsla\u2026";
    },
    get$warning() {
      return "Varov\xe1n\xed!";
    },
    get$weSentYouAnEmail() {
      return "Zaslali jsme v\xe1m e-mail";
    },
    get$whoCanPerformWhichAction() {
      return "Kdo m\u016f\u017ee prov\xe9st jakou akci";
    },
    get$whoIsAllowedToJoinThisGroup() {
      return "Kdo se m\u016f\u017ee p\u0159ipojit do t\xe9to skupiny";
    },
    get$whyDoYouWantToReportThis() {
      return "Pro\u010d to chcete nahl\xe1sit?";
    },
    get$withTheseAddressesRecoveryDescription() {
      return "S t\u011bmito adresami m\u016f\u017eete obnovit sv\xe9 heslo.";
    },
    get$writeAMessage() {
      return "Napi\u0161te zpr\xe1vu\u2026";
    },
    writeAMessageFlag$2(l1flag, l2flag) {
      return "Write a message in " + l1flag + " or " + l2flag;
    },
    get$yes() {
      return "Ano";
    },
    get$you() {
      return "Vy";
    },
    get$youAreNoLongerParticipatingInThisChat() {
      return "Tohoto chatu se nad\xe1le ne\xfa\u010dastn\xedte";
    },
    get$youHaveBeenBannedFromThisChat() {
      return "Byl v\xe1m zablokov\xe1n p\u0159\xedstup k tomuto chatu";
    },
    get$yourPublicKey() {
      return "V\xe1\u0161 ve\u0159ejn\xfd kl\xed\u010d";
    },
    get$messageInfo() {
      return "Informace o zpr\xe1v\u011b";
    },
    get$time(_) {
      return "\u010cas";
    },
    get$sender() {
      return "Odes\xedlatel";
    },
    get$openGallery() {
      return "Otev\u0159\xedt galerii";
    },
    get$removeFromSpace() {
      return "Odstranit z tohoto m\xedsta";
    },
    videoWithSize$1(size) {
      return "Video (" + size + ")";
    },
    get$markAsRead() {
      return "Ozna\u010dit jako p\u0159e\u010dten\xe9";
    },
    get$reportUser() {
      return "Nahl\xe1sit u\u017eivatele";
    },
    reactedWith$2(sender, reaction) {
      return sender + " reagoval s " + reaction;
    },
    get$pinMessage() {
      return "P\u0159ipnout zpr\xe1vu do m\xedstnosti";
    },
    get$confirmEventUnpin() {
      return "Opravdu chcete ud\xe1lost trvale odepnout?";
    },
    get$emojis() {
      return "Emojis";
    },
    get$youRejectedTheInvitation() {
      return "Odm\xedtli jste pozv\xe1n\xed";
    },
    get$youJoinedTheChat() {
      return "P\u0159ipojili jste se k chatu";
    },
    get$youAcceptedTheInvitation() {
      return "P\u0159ijal jsi pozv\xe1n\xed";
    },
    youBannedUser$1(user) {
      return "Zak\xe1zali jste u\u017eivatele " + user;
    },
    youHaveWithdrawnTheInvitationFor$1(user) {
      return "St\xe1hli jste pozv\xe1nku pro u\u017eivatele " + user;
    },
    youInvitedBy$1(user) {
      return "Byli jste pozv\xe1ni u\u017eivatelem " + user;
    },
    youInvitedUser$1(user) {
      return "Pozvali jste u\u017eivatele " + user;
    },
    youKicked$1(user) {
      return "Vykopli jste u\u017eivatele " + user;
    },
    youUnbannedUser$1(user) {
      return "Zru\u0161ili jste z\xe1kaz u\u017eivateli " + user;
    },
    hasKnocked$1(user) {
      return "\ud83d\udeaa " + user + " has knocked";
    },
    get$usersMustKnock() {
      return "Users must knock";
    },
    get$noOneCanJoin() {
      return "No one can join";
    },
    userWouldLikeToChangeTheChat$1(user) {
      return user + " would like to join the chat.";
    },
    get$knock() {
      return "Knock";
    },
    get$users() {
      return "U\u017eivatel\xe9";
    },
    countFiles$1(count) {
      return count + " soubor\u016f";
    },
    get$user() {
      return "U\u017eivatel";
    },
    get$custom() {
      return "Vlastn\xed";
    },
    get$noKeyForThisMessage() {
      return "This can happen if the message was sent before you have signed in to your account at this device.\n\nIt is also possible that the sender has blocked your device or something went wrong with the internet connection.\n\nAre you able to read the message on another session? Then you can transfer the message from it! Go to Settings > Devices and make sure that your devices have verified each other. When you open the room the next time and both sessions are in the foreground, the keys will be transmitted automatically.\n\nDo you not want to lose the keys when logging out or switching devices? Make sure that you have enabled the chat backup in the settings.";
    },
    get$newSpace() {
      return "Nov\xfd prostor";
    },
    get$doNotShowAgain() {
      return "Nezobrazovat znovu";
    },
    wasDirectChatDisplayName$1(oldDisplayName) {
      return "Pr\xe1zdn\xe1 konverzace (d\u0159\xedve " + oldDisplayName + ")";
    },
    get$reopenChat() {
      return "Znovu otev\u0159\xedt konverzaci";
    },
    get$noBackupWarning() {
      return "Don't forget your password!";
    },
    get$noOtherDevicesFound() {
      return "\u017d\xe1dn\xe1 ostatn\xed za\u0159\xedzen\xed nebyla nalezena";
    },
    fileIsTooBigForServer$1(max) {
      return "Server oznamuje \u017ee soubor je p\u0159\xedli\u0161 velk\xfd na odesl\xe1n\xed.";
    },
    get$jumpToLastReadMessage() {
      return "Sko\u010dit na naposledy p\u0159e\u010dtenou zpr\xe1vu";
    },
    get$readUpToHere() {
      return "Read up to here";
    },
    get$jump() {
      return "Sko\u010dit";
    },
    get$openLinkInBrowser() {
      return "Otev\u0159\xedt odkaz v prohl\xed\u017ee\u010di";
    },
    get$profileNotFound() {
      return "U\u017eivatel nebyl na serveru nalezen. Mo\u017en\xe1 je probl\xe9m s p\u0159ipojen\xedm nebo u\u017eivatel neexistuje.";
    },
    get$setColorTheme() {
      return "Nastavit barvy:";
    },
    get$invite() {
      return "Invite";
    },
    get$invitePrivateChat() {
      return "\ud83d\udce8 Invite private chat";
    },
    get$invalidInput() {
      return "Invalid input!";
    },
    wrongPinEntered$1(seconds) {
      return "Wrong pin entered! Try again in " + seconds + " seconds...";
    },
    get$allCorrect() {
      return "That's how I would say it! Nice!";
    },
    get$newWayAllGood() {
      return "That's not how I would have said it but it looks good!";
    },
    get$othersAreBetter() {
      return "Hm, there might be a better way to say that.";
    },
    get$holdForInfo() {
      return "Click and hold for word info.";
    },
    get$greenFeedback() {
      return "That's what I would put!";
    },
    get$yellowFeedback() {
      return "Hm, you can try that and see if it works! To use this word, just click it again.";
    },
    get$redFeedback() {
      return "I don't think that's right...";
    },
    get$itInstructionsTitle() {
      return "I can help you translate!";
    },
    get$itInstructionsBody() {
      return "You can click and hold choices for word info.";
    },
    get$gaTooltip() {
      return "L2 use with grammar assistance";
    },
    get$taTooltip() {
      return "L2 use with translation assistance";
    },
    get$unTooltip() {
      return "Other";
    },
    get$interactiveTranslatorSliderHeader() {
      return "Interactive Translator";
    },
    get$interactiveGrammarSliderHeader() {
      return "Interactive Grammar Checker";
    },
    get$multiLingualSpace() {
      return "Multilingual Space";
    },
    get$waTooltip() {
      return "L2 use without assistance";
    },
    get$addStudents() {
      return "Invite users by link or code";
    },
    get$copyClassLink() {
      return "Copy invite link";
    },
    get$copyClassLinkDesc() {
      return "Clicking this link will take users to the app, direct them to make an account and they will automatically join this space.";
    },
    get$copyClassCode() {
      return "Copy invite code";
    },
    get$inviteStudentByUserName() {
      return "Invite users by username";
    },
    get$selectLanguageLevel() {
      return "Select language level";
    },
    get$noIdenticalLanguages() {
      return "Please choose different base and target languages";
    },
    get$iWantALanguagePartnerFrom() {
      return "Is from:";
    },
    get$worldWide() {
      return "Worldwide";
    },
    get$noResults() {
      return "No results! Try broadening your search.";
    },
    get$iWantAConversationPartner() {
      return "I want a conversation partner who";
    },
    get$iWantALanguagePartnerWhoSpeaks() {
      return "Speaks:";
    },
    get$iWantALanguagePartnerWhoIsLearning() {
      return "Is learning:";
    },
    get$joinWithClassCode() {
      return "Join space";
    },
    get$joinWithClassCodeHint() {
      return "Enter invite code";
    },
    get$unableToFindClass() {
      return "There's no space with that code. Please try again.";
    },
    get$languageLevelPreA1() {
      return "True Beginner (Pre A1)";
    },
    get$languageLevelA1() {
      return "Beginner (A1)";
    },
    get$languageLevelA2() {
      return "Elementary (A2)";
    },
    get$languageLevelB1() {
      return "Intermediate (B1)";
    },
    get$languageLevelB2() {
      return "Upper Intermediate (B2)";
    },
    get$languageLevelC1() {
      return "Advanced (C1)";
    },
    get$languageLevelC2() {
      return "Mastery (C2)";
    },
    get$changeTheNameOfTheClass() {
      return "Change the name";
    },
    get$changeTheNameOfTheChat() {
      return "Change the name of the chat";
    },
    get$sorryNoResults() {
      return "Sorry, no results.";
    },
    get$ignoreInThisText() {
      return "Ignore";
    },
    get$helpMeTranslate() {
      return "Yes!";
    },
    get$needsItShortMessage() {
      return "Out of target";
    },
    needsItMessage$1(targetLanguage) {
      return "Wait, that's not " + targetLanguage + "! Do you need help translating?";
    },
    get$tokenTranslationTitle() {
      return "A word is in your base language.";
    },
    get$spanTranslationDesc() {
      return "See possible translations below.";
    },
    get$spanTranslationTitle() {
      return "Some words are in your base language.";
    },
    get$l1SpanAndGrammarTitle() {
      return "Outside target language";
    },
    get$l1SpanAndGrammarDesc() {
      return "This could in your base language or it could be a grammar error.";
    },
    get$countryInformation() {
      return "My country";
    },
    get$myLanguages() {
      return "My base and target languages";
    },
    get$targetLanguage() {
      return "Target Language";
    },
    get$sourceLanguage() {
      return "Base language";
    },
    get$updateLanguage() {
      return "My languages";
    },
    get$whatLanguageYouWantToLearn() {
      return "What language do you want to learn?";
    },
    get$whatIsYourBaseLanguage() {
      return "What is your base language?";
    },
    get$saveChanges() {
      return "Save changes";
    },
    get$publicProfileTitle() {
      return "Allow my profile to be found in search";
    },
    get$publicProfileDesc() {
      return "By enabling this option, I confirm that I am of legal age in my country of residence";
    },
    get$errorDisableIT() {
      return "Translation assistance is turned off.";
    },
    get$errorDisableIGC() {
      return "Grammar assistance is turned off.";
    },
    get$errorDisableLanguageAssistance() {
      return "Translation assistance and grammar assistance are turned off.";
    },
    get$errorDisableITUserDesc() {
      return "Click here to update translation assistance settings";
    },
    get$errorDisableIGCUserDesc() {
      return "Click here to update grammar assistance settings";
    },
    get$errorDisableLanguageAssistanceUserDesc() {
      return "Click here to update translation assistance and grammar assistance settings";
    },
    get$errorDisableITClassDesc() {
      return "Translation assistance is turned off for the space that this chat is in.";
    },
    get$errorDisableIGCClassDesc() {
      return "Grammar assistance is turned off for the space that this chat is in.";
    },
    get$error405Title() {
      return "Languages not set";
    },
    get$error405Desc() {
      return "Please set your languages in Main Menu > Learning Settings.";
    },
    get$iAgreeToThe() {
      return "I agree to the ";
    },
    get$termsAndConditions() {
      return "Terms and Conditions";
    },
    get$error502504Title() {
      return "Wow, there are a lot of students online!";
    },
    get$error502504Desc() {
      return "Translation and grammar tools may be slow or unavailable while the Pangea bots catch up.";
    },
    get$error404Title() {
      return "Translation error!";
    },
    get$error404Desc() {
      return "Pangea Bot isn't sure how to translate that...";
    },
    get$errorPleaseRefresh() {
      return "We're looking into it! Please reload and try again.";
    },
    get$toggleToolSettingsDescription() {
      return "Here you can toggle your individual language tool settings.";
    },
    get$connectedToStaging() {
      return "Connected to Staging";
    },
    get$learningSettings() {
      return "Learning settings";
    },
    get$almostPerfect() {
      return "That seems right! Here's what I would have said.";
    },
    get$prettyGood() {
      return "Pretty good! Here's what I would have said.";
    },
    get$letMeThink() {
      return "Hmm, let's see how you did!";
    },
    get$clickMessageTitle() {
      return "Need help?";
    },
    get$clickMessageBody() {
      return "Click a message for language tools like translation, play back and more!";
    },
    get$allDone() {
      return "All done!";
    },
    get$vocab() {
      return "Vocabulary";
    },
    get$subscribe(_) {
      return "Subscribe";
    },
    get$getAccess() {
      return "Subscribe now!";
    },
    get$subscriptionDesc() {
      return "Messaging is free! Subscribe to unlock interactive translation, grammar checking and learning analytics.";
    },
    get$subscriptionManagement() {
      return "Subscription Management";
    },
    get$currentSubscription() {
      return "Current Subscription";
    },
    get$cancelSubscription() {
      return "Cancel your subscription";
    },
    get$selectYourPlan() {
      return "Select Your Plan";
    },
    get$subsciptionPlatformTooltip() {
      return "Please login to your original device to manage your subscription plan";
    },
    get$subscriptionManagementUnavailable() {
      return "Subscription management not available";
    },
    get$paymentMethod() {
      return "Payment Method";
    },
    get$paymentHistory() {
      return "Payment History";
    },
    get$emptyChatDownloadWarning() {
      return "Cannot download empty chat";
    },
    get$toggleImmersionMode() {
      return "Immersion Mode";
    },
    get$toggleImmersionModeDesc() {
      return "When enabled, all messages are displayed in your target language. This setting is most useful in language exchanges.";
    },
    get$itToggleDescription() {
      return "This language learning tool will identify words in your base language and help you translate them to your target language. Though rare, the AI can make translation errors.";
    },
    get$igcToggleDescription() {
      return "This language learning tool will identify common spelling, grammar and punctuation errors in your message and suggest corrections. Though rare, the AI can make correction errors.";
    },
    get$alreadyInClass() {
      return "You are already in this space.";
    },
    get$originalMessage() {
      return "Original Message";
    },
    get$sentMessage() {
      return "Sent Message";
    },
    get$useType() {
      return "Use Type";
    },
    get$notAvailable() {
      return "Not Available";
    },
    get$taAndGaTooltip() {
      return "L2 use with translation assistance and grammar assistance";
    },
    get$definitionsToolName() {
      return "Word Definitions";
    },
    get$definitionsToolDescription() {
      return "When enabled, words underlined in blue can be clicked for definitions. Click messages to access definitions.";
    },
    get$welcomeBack() {
      return "Welcome back! If you were part of the 2023-2024 pilot, please contact us for your special pilot subscription. If you are a teacher who has (or whose institution has) purchased licenses for your class, contact us for your teacher subscription.";
    },
    get$downloadTxtFile() {
      return "Download Text File";
    },
    get$downloadCSVFile() {
      return "Download CSV File";
    },
    get$promotionalSubscriptionDesc() {
      return "You currently have a lifetime promotional subscription. Message support@pangea.chat for help changing your subscription.";
    },
    originalSubscriptionPlatform$1(purchasePlatform) {
      return "Subscription purchased through " + purchasePlatform;
    },
    get$oneWeekTrial() {
      return "One Week Trial";
    },
    get$downloadXLSXFile() {
      return "Download Excel File";
    },
    get$abDisplayName() {
      return "Abkhaz";
    },
    get$aaDisplayName() {
      return "Afar";
    },
    get$afDisplayName() {
      return "Afrikaans";
    },
    get$akDisplayName() {
      return "Akan";
    },
    get$sqDisplayName() {
      return "Albanian";
    },
    get$amDisplayName() {
      return "Amharic";
    },
    get$arDisplayName() {
      return "Arabic";
    },
    get$anDisplayName() {
      return "Aragonese";
    },
    get$hyDisplayName() {
      return "Armenian";
    },
    get$asDisplayName() {
      return "Assamese";
    },
    get$avDisplayName() {
      return "Avaric";
    },
    get$aeDisplayName() {
      return "Avestan";
    },
    get$ayDisplayName() {
      return "Aymara";
    },
    get$azDisplayName() {
      return "Azerbaijani";
    },
    get$bmDisplayName() {
      return "Bambara";
    },
    get$baDisplayName() {
      return "Bashkir";
    },
    get$euDisplayName() {
      return "Basque";
    },
    get$beDisplayName() {
      return "Belarusian";
    },
    get$bnDisplayName() {
      return "Bengali";
    },
    get$bhDisplayName() {
      return "Bihari";
    },
    get$biDisplayName() {
      return "Bislama";
    },
    get$bsDisplayName() {
      return "Bosnian";
    },
    get$brDisplayName() {
      return "Breton";
    },
    get$bgDisplayName() {
      return "Bulgarian";
    },
    get$myDisplayName() {
      return "Burmese";
    },
    get$caDisplayName() {
      return "Catalan, Valencian";
    },
    get$chDisplayName() {
      return "Chamorro";
    },
    get$ceDisplayName() {
      return "Chechen";
    },
    get$nyDisplayName() {
      return "Chichewa, Chewa, Nyanja";
    },
    get$zhDisplayName() {
      return "Chinese";
    },
    get$cvDisplayName() {
      return "Chuvash";
    },
    get$kwDisplayName() {
      return "Cornish";
    },
    get$coDisplayName() {
      return "Corsican";
    },
    get$crDisplayName() {
      return "Cree";
    },
    get$hrDisplayName() {
      return "Croatian";
    },
    get$csDisplayName() {
      return "Czech";
    },
    get$daDisplayName() {
      return "Danish";
    },
    get$dvDisplayName() {
      return "Divehi; Dhivehi; Maldivian;";
    },
    get$nlDisplayName() {
      return "Dutch";
    },
    get$enDisplayName() {
      return "English";
    },
    get$eoDisplayName() {
      return "Esperanto";
    },
    get$etDisplayName() {
      return "Estonian";
    },
    get$eeDisplayName() {
      return "Ewe";
    },
    get$foDisplayName() {
      return "Faroese";
    },
    get$fjDisplayName() {
      return "Fijian";
    },
    get$fiDisplayName() {
      return "Finnish";
    },
    get$frDisplayName() {
      return "French";
    },
    get$ffDisplayName() {
      return "Fula; Fulah; Pulaar; Pular";
    },
    get$glDisplayName() {
      return "Galician";
    },
    get$kaDisplayName() {
      return "Georgian";
    },
    get$deDisplayName() {
      return "German";
    },
    get$elDisplayName() {
      return "Greek, Modern";
    },
    get$gnDisplayName() {
      return "Guaran\xed";
    },
    get$guDisplayName() {
      return "Gujarati";
    },
    get$htDisplayName() {
      return "Haitian, Haitian Creole";
    },
    get$haDisplayName() {
      return "Hausa";
    },
    get$heDisplayName() {
      return "Hebrew (modern)";
    },
    get$hzDisplayName() {
      return "Herero";
    },
    get$hiDisplayName() {
      return "Hindi";
    },
    get$hoDisplayName() {
      return "Hiri Motu";
    },
    get$huDisplayName() {
      return "Hungarian";
    },
    get$iaDisplayName() {
      return "Interlingua";
    },
    get$idDisplayName() {
      return "Indonesian";
    },
    get$ieDisplayName() {
      return "Interlingue";
    },
    get$gaDisplayName() {
      return "Irish";
    },
    get$igDisplayName() {
      return "Igbo";
    },
    get$ikDisplayName() {
      return "Inupiaq";
    },
    get$ioDisplayName() {
      return "Ido";
    },
    get$isDisplayName() {
      return "Icelandic";
    },
    get$itDisplayName() {
      return "Italian";
    },
    get$iuDisplayName() {
      return "Inuktitut";
    },
    get$jaDisplayName() {
      return "Japanese";
    },
    get$jvDisplayName() {
      return "Javanese";
    },
    get$klDisplayName() {
      return "Kalaallisut, Greenlandic";
    },
    get$knDisplayName() {
      return "Kannada";
    },
    get$krDisplayName() {
      return "Kanuri";
    },
    get$ksDisplayName() {
      return "Kashmiri";
    },
    get$kkDisplayName() {
      return "Kazakh";
    },
    get$kmDisplayName() {
      return "Khmer";
    },
    get$kiDisplayName() {
      return "Kikuyu, Gikuyu";
    },
    get$rwDisplayName() {
      return "Kinyarwanda";
    },
    get$kyDisplayName() {
      return "Kirghiz, Kyrgyz";
    },
    get$kvDisplayName() {
      return "Komi";
    },
    get$kgDisplayName() {
      return "Kongo";
    },
    get$koDisplayName() {
      return "Korean";
    },
    get$kuDisplayName() {
      return "Kurdish";
    },
    get$kjDisplayName() {
      return "Kwanyama, Kuanyama";
    },
    get$laDisplayName() {
      return "Latin";
    },
    get$lbDisplayName() {
      return "Luxembourgish, Letzeburgesch";
    },
    get$lgDisplayName() {
      return "Luganda";
    },
    get$liDisplayName() {
      return "Limburgish, Limburgan, Limburger";
    },
    get$lnDisplayName() {
      return "Lingala";
    },
    get$loDisplayName() {
      return "Lao";
    },
    get$ltDisplayName() {
      return "Lithuanian";
    },
    get$luDisplayName() {
      return "Luba-Katanga";
    },
    get$lvDisplayName() {
      return "Latvian";
    },
    get$gvDisplayName() {
      return "Manx";
    },
    get$mkDisplayName() {
      return "Macedonian";
    },
    get$mgDisplayName() {
      return "Malagasy";
    },
    get$msDisplayName() {
      return "Malay";
    },
    get$mlDisplayName() {
      return "Malayalam";
    },
    get$mtDisplayName() {
      return "Maltese";
    },
    get$miDisplayName() {
      return "M\u0101ori";
    },
    get$mrDisplayName() {
      return "Marathi (Mar\u0101\u1e6dh\u012b)";
    },
    get$mhDisplayName() {
      return "Marshallese";
    },
    get$mnDisplayName() {
      return "Mongolian";
    },
    get$naDisplayName() {
      return "Nauru";
    },
    get$nvDisplayName() {
      return "Navajo, Navaho";
    },
    get$nbDisplayName() {
      return "Norwegian Bokm\xe5l";
    },
    get$ndDisplayName() {
      return "North Ndebele";
    },
    get$neDisplayName() {
      return "Nepali";
    },
    get$ngDisplayName() {
      return "Ndonga";
    },
    get$nnDisplayName() {
      return "Norwegian Nynorsk";
    },
    get$noDisplayName() {
      return "Norwegian";
    },
    get$iiDisplayName() {
      return "Nuosu";
    },
    get$nrDisplayName() {
      return "South Ndebele";
    },
    get$ocDisplayName() {
      return "Occitan";
    },
    get$ojDisplayName() {
      return "Ojibwe, Ojibwa";
    },
    get$cuDisplayName() {
      return "Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic";
    },
    get$omDisplayName() {
      return "Oromo";
    },
    get$orDisplayName() {
      return "Oriya";
    },
    get$osDisplayName() {
      return "Ossetian, Ossetic";
    },
    get$paDisplayName() {
      return "Panjabi, Punjabi";
    },
    get$piDisplayName() {
      return "P\u0101li";
    },
    get$faDisplayName() {
      return "Persian";
    },
    get$plDisplayName() {
      return "Polish";
    },
    get$psDisplayName() {
      return "Pashto, Pushto";
    },
    get$ptDisplayName() {
      return "Portuguese";
    },
    get$quDisplayName() {
      return "Quechua";
    },
    get$rmDisplayName() {
      return "Romansh";
    },
    get$rnDisplayName() {
      return "Kirundi";
    },
    get$roDisplayName() {
      return "Romanian, Moldavian, Moldovan";
    },
    get$ruDisplayName() {
      return "Russian";
    },
    get$saDisplayName() {
      return "Sanskrit (Sa\u1e41sk\u1e5bta)";
    },
    get$scDisplayName() {
      return "Sardinian";
    },
    get$sdDisplayName() {
      return "Sindhi";
    },
    get$seDisplayName() {
      return "Northern Sami";
    },
    get$smDisplayName() {
      return "Samoan";
    },
    get$sgDisplayName() {
      return "Sango";
    },
    get$srDisplayName() {
      return "Serbian";
    },
    get$gdDisplayName() {
      return "Scottish Gaelic, Gaelic";
    },
    get$snDisplayName() {
      return "Shona";
    },
    get$siDisplayName() {
      return "Sinhala, Sinhalese";
    },
    get$skDisplayName() {
      return "Slovak";
    },
    get$slDisplayName() {
      return "Slovene";
    },
    get$soDisplayName() {
      return "Somali";
    },
    get$stDisplayName() {
      return "Southern Sotho";
    },
    get$esDisplayName() {
      return "Spanish";
    },
    get$suDisplayName() {
      return "Sundanese";
    },
    get$swDisplayName() {
      return "Swahili";
    },
    get$ssDisplayName() {
      return "Swati";
    },
    get$svDisplayName() {
      return "Swedish";
    },
    get$taDisplayName() {
      return "Tamil";
    },
    get$teDisplayName() {
      return "Telugu";
    },
    get$tgDisplayName() {
      return "Tajik";
    },
    get$thDisplayName() {
      return "Thai";
    },
    get$tiDisplayName() {
      return "Tigrinya";
    },
    get$boDisplayName() {
      return "Tibetan Standard, Tibetan, Central";
    },
    get$tkDisplayName() {
      return "Turkmen";
    },
    get$tlDisplayName() {
      return "Tagalog";
    },
    get$tnDisplayName() {
      return "Tswana";
    },
    get$toDisplayName() {
      return "Tonga (Tonga Islands)";
    },
    get$trDisplayName() {
      return "Turkish";
    },
    get$tsDisplayName() {
      return "Tsonga";
    },
    get$ttDisplayName() {
      return "Tatar";
    },
    get$twDisplayName() {
      return "Twi";
    },
    get$tyDisplayName() {
      return "Tahitian";
    },
    get$ugDisplayName() {
      return "Uighur, Uyghur";
    },
    get$ukDisplayName() {
      return "Ukrainian";
    },
    get$urDisplayName() {
      return "Urdu";
    },
    get$uzDisplayName() {
      return "Uzbek";
    },
    get$veDisplayName() {
      return "Venda";
    },
    get$viDisplayName() {
      return "Vietnamese";
    },
    get$voDisplayName() {
      return "Volap\xfck";
    },
    get$waDisplayName() {
      return "Walloon";
    },
    get$cyDisplayName() {
      return "Welsh";
    },
    get$woDisplayName() {
      return "Wolof";
    },
    get$fyDisplayName() {
      return "Western Frisian";
    },
    get$xhDisplayName() {
      return "Xhosa";
    },
    get$yiDisplayName() {
      return "Yiddish";
    },
    get$yoDisplayName() {
      return "Yoruba";
    },
    get$zaDisplayName() {
      return "Zhuang, Chuang";
    },
    get$unkDisplayName() {
      return "Unknown";
    },
    get$zuDisplayName() {
      return "Zulu";
    },
    get$hawDisplayName() {
      return "Hawaiian";
    },
    get$hmnDisplayName() {
      return "Hmong";
    },
    get$multiDisplayName() {
      return "Multi";
    },
    get$cebDisplayName() {
      return "Cebuano";
    },
    get$dzDisplayName() {
      return "Dzongkha";
    },
    get$iwDisplayName() {
      return "Hebrew";
    },
    get$jwDisplayName() {
      return "Javanese";
    },
    get$moDisplayName() {
      return "Moldavian";
    },
    get$shDisplayName() {
      return "Serbo-Croatian";
    },
    get$wwCountryDisplayName() {
      return "World Wide";
    },
    get$afCountryDisplayName() {
      return "Afghanistan";
    },
    get$axCountryDisplayName() {
      return "Aland Islands";
    },
    get$alCountryDisplayName() {
      return "Albania";
    },
    get$dzCountryDisplayName() {
      return "Algeria";
    },
    get$asCountryDisplayName() {
      return "American Samoa";
    },
    get$adCountryDisplayName() {
      return "Andorra";
    },
    get$aoCountryDisplayName() {
      return "Angola";
    },
    get$aiCountryDisplayName() {
      return "Anguilla";
    },
    get$agCountryDisplayName() {
      return "Antigua and Barbuda";
    },
    get$arCountryDisplayName() {
      return "Argentina";
    },
    get$amCountryDisplayName() {
      return "Armenia";
    },
    get$awCountryDisplayName() {
      return "Aruba";
    },
    get$acCountryDisplayName() {
      return "Ascension Island";
    },
    get$auCountryDisplayName() {
      return "Australia";
    },
    get$atCountryDisplayName() {
      return "Austria";
    },
    get$azCountryDisplayName() {
      return "Azerbaijan";
    },
    get$bsCountryDisplayName() {
      return "Bahamas";
    },
    get$bhCountryDisplayName() {
      return "Bahrain";
    },
    get$bdCountryDisplayName() {
      return "Bangladesh";
    },
    get$bbCountryDisplayName() {
      return "Barbados";
    },
    get$byCountryDisplayName() {
      return "Belarus";
    },
    get$beCountryDisplayName() {
      return "Belgium";
    },
    get$bzCountryDisplayName() {
      return "Belize";
    },
    get$bjCountryDisplayName() {
      return "Benin";
    },
    get$bmCountryDisplayName() {
      return "Bermuda";
    },
    get$btCountryDisplayName() {
      return "Bhutan";
    },
    get$boCountryDisplayName() {
      return "Bolivia";
    },
    get$baCountryDisplayName() {
      return "Bosnia and Herzegovina";
    },
    get$bwCountryDisplayName() {
      return "Botswana";
    },
    get$brCountryDisplayName() {
      return "Brazil";
    },
    get$ioCountryDisplayName() {
      return "British Indian Ocean Territory";
    },
    get$vgCountryDisplayName() {
      return "British Virgin Islands";
    },
    get$bnCountryDisplayName() {
      return "Brunei";
    },
    get$bgCountryDisplayName() {
      return "Bulgaria";
    },
    get$bfCountryDisplayName() {
      return "Burkina Faso";
    },
    get$biCountryDisplayName() {
      return "Burundi";
    },
    get$khCountryDisplayName() {
      return "Cambodia";
    },
    get$cmCountryDisplayName() {
      return "Cameroon";
    },
    get$caCountryDisplayName() {
      return "Canada";
    },
    get$cvCountryDisplayName() {
      return "Cape Verde";
    },
    get$bqCountryDisplayName() {
      return "Caribbean Netherlands";
    },
    get$kyCountryDisplayName() {
      return "Cayman Islands";
    },
    get$cfCountryDisplayName() {
      return "Central African Republic";
    },
    get$tdCountryDisplayName() {
      return "Chad";
    },
    get$clCountryDisplayName() {
      return "Chile";
    },
    get$cnCountryDisplayName() {
      return "China";
    },
    get$cxCountryDisplayName() {
      return "Christmas Island";
    },
    get$ccCountryDisplayName() {
      return "Cocos [Keeling] Islands";
    },
    get$coCountryDisplayName() {
      return "Colombia";
    },
    get$kmCountryDisplayName() {
      return "Comoros";
    },
    get$cdCountryDisplayName() {
      return "Democratic Republic Congo";
    },
    get$cgCountryDisplayName() {
      return "Republic of Congo";
    },
    get$ckCountryDisplayName() {
      return "Cook Islands";
    },
    get$crCountryDisplayName() {
      return "Costa Rica";
    },
    get$ciCountryDisplayName() {
      return "C\xf4te d'Ivoire";
    },
    get$hrCountryDisplayName() {
      return "Croatia";
    },
    get$cuCountryDisplayName() {
      return "Cuba";
    },
    get$cwCountryDisplayName() {
      return "Cura\xe7ao";
    },
    get$cyCountryDisplayName() {
      return "Cyprus";
    },
    get$czCountryDisplayName() {
      return "Czech Republic";
    },
    get$dkCountryDisplayName() {
      return "Denmark";
    },
    get$djCountryDisplayName() {
      return "Djibouti";
    },
    get$dmCountryDisplayName() {
      return "Dominica";
    },
    get$doCountryDisplayName() {
      return "Dominican Republic";
    },
    get$tlCountryDisplayName() {
      return "East Timor";
    },
    get$ecCountryDisplayName() {
      return "Ecuador";
    },
    get$egCountryDisplayName() {
      return "Egypt";
    },
    get$svCountryDisplayName() {
      return "El Salvador";
    },
    get$gqCountryDisplayName() {
      return "Equatorial Guinea";
    },
    get$erCountryDisplayName() {
      return "Eritrea";
    },
    get$eeCountryDisplayName() {
      return "Estonia";
    },
    get$szCountryDisplayName() {
      return "Eswatini";
    },
    get$etCountryDisplayName() {
      return "Ethiopia";
    },
    get$fkCountryDisplayName() {
      return "Falkland Islands";
    },
    get$foCountryDisplayName() {
      return "Faroe Islands";
    },
    get$fjCountryDisplayName() {
      return "Fiji";
    },
    get$fiCountryDisplayName() {
      return "Finland";
    },
    get$frCountryDisplayName() {
      return "France";
    },
    get$gfCountryDisplayName() {
      return "French Guiana";
    },
    get$pfCountryDisplayName() {
      return "French Polynesia";
    },
    get$gaCountryDisplayName() {
      return "Gabon";
    },
    get$gmCountryDisplayName() {
      return "Gambia";
    },
    get$geCountryDisplayName() {
      return "Georgia";
    },
    get$deCountryDisplayName() {
      return "Germany";
    },
    get$ghCountryDisplayName() {
      return "Ghana";
    },
    get$giCountryDisplayName() {
      return "Gibraltar";
    },
    get$grCountryDisplayName() {
      return "Greece";
    },
    get$glCountryDisplayName() {
      return "Greenland";
    },
    get$gdCountryDisplayName() {
      return "Grenada";
    },
    get$gpCountryDisplayName() {
      return "Guadeloupe";
    },
    get$guCountryDisplayName() {
      return "Guam";
    },
    get$gtCountryDisplayName() {
      return "Guatemala";
    },
    get$ggCountryDisplayName() {
      return "Guernsey";
    },
    get$gnCountryDisplayName() {
      return "Guinea Conakry";
    },
    get$gwCountryDisplayName() {
      return "Guinea-Bissau";
    },
    get$gyCountryDisplayName() {
      return "Guyana";
    },
    get$htCountryDisplayName() {
      return "Haiti";
    },
    get$hmCountryDisplayName() {
      return "Heard Island and McDonald Islands";
    },
    get$hnCountryDisplayName() {
      return "Honduras";
    },
    get$hkCountryDisplayName() {
      return "Hong Kong";
    },
    get$huCountryDisplayName() {
      return "Hungary";
    },
    get$isCountryDisplayName() {
      return "Iceland";
    },
    get$inCountryDisplayName() {
      return "India";
    },
    get$idCountryDisplayName() {
      return "Indonesia";
    },
    get$irCountryDisplayName() {
      return "Iran";
    },
    get$iqCountryDisplayName() {
      return "Iraq";
    },
    get$ieCountryDisplayName() {
      return "Ireland";
    },
    get$imCountryDisplayName() {
      return "Isle of Man";
    },
    get$ilCountryDisplayName() {
      return "Israel";
    },
    get$itCountryDisplayName() {
      return "Italy";
    },
    get$jmCountryDisplayName() {
      return "Jamaica";
    },
    get$jpCountryDisplayName() {
      return "Japan";
    },
    get$jeCountryDisplayName() {
      return "Jersey";
    },
    get$joCountryDisplayName() {
      return "Jordan";
    },
    get$kzCountryDisplayName() {
      return "Kazakhstan";
    },
    get$keCountryDisplayName() {
      return "Kenya";
    },
    get$kiCountryDisplayName() {
      return "Kiribati";
    },
    get$xkCountryDisplayName() {
      return "Kosovo";
    },
    get$kwCountryDisplayName() {
      return "Kuwait";
    },
    get$kgCountryDisplayName() {
      return "Kyrgyzstan";
    },
    get$laCountryDisplayName() {
      return "Laos";
    },
    get$lvCountryDisplayName() {
      return "Latvia";
    },
    get$lbCountryDisplayName() {
      return "Lebanon";
    },
    get$lsCountryDisplayName() {
      return "Lesotho";
    },
    get$lrCountryDisplayName() {
      return "Liberia";
    },
    get$lyCountryDisplayName() {
      return "Libya";
    },
    get$liCountryDisplayName() {
      return "Liechtenstein";
    },
    get$ltCountryDisplayName() {
      return "Lithuania";
    },
    get$luCountryDisplayName() {
      return "Luxembourg";
    },
    get$moCountryDisplayName() {
      return "Macau";
    },
    get$mkCountryDisplayName() {
      return "Macedonia";
    },
    get$mgCountryDisplayName() {
      return "Madagascar";
    },
    get$mwCountryDisplayName() {
      return "Malawi";
    },
    get$myCountryDisplayName() {
      return "Malaysia";
    },
    get$mvCountryDisplayName() {
      return "Maldives";
    },
    get$mlCountryDisplayName() {
      return "Mali";
    },
    get$mtCountryDisplayName() {
      return "Malta";
    },
    get$mhCountryDisplayName() {
      return "Marshall Islands";
    },
    get$mqCountryDisplayName() {
      return "Martinique";
    },
    get$mrCountryDisplayName() {
      return "Mauritania";
    },
    get$muCountryDisplayName() {
      return "Mauritius";
    },
    get$ytCountryDisplayName() {
      return "Mayotte";
    },
    get$mxCountryDisplayName() {
      return "Mexico";
    },
    get$fmCountryDisplayName() {
      return "Micronesia";
    },
    get$mdCountryDisplayName() {
      return "Moldova";
    },
    get$mcCountryDisplayName() {
      return "Monaco";
    },
    get$mnCountryDisplayName() {
      return "Mongolia";
    },
    get$meCountryDisplayName() {
      return "Montenegro";
    },
    get$msCountryDisplayName() {
      return "Montserrat";
    },
    get$maCountryDisplayName() {
      return "Morocco";
    },
    get$mzCountryDisplayName() {
      return "Mozambique";
    },
    get$mmCountryDisplayName() {
      return "Myanmar (Burma)";
    },
    get$naCountryDisplayName() {
      return "Namibia";
    },
    get$nrCountryDisplayName() {
      return "Nauru";
    },
    get$npCountryDisplayName() {
      return "Nepal";
    },
    get$nlCountryDisplayName() {
      return "Netherlands";
    },
    get$ncCountryDisplayName() {
      return "New Caledonia";
    },
    get$nzCountryDisplayName() {
      return "New Zealand";
    },
    get$niCountryDisplayName() {
      return "Nicaragua";
    },
    get$neCountryDisplayName() {
      return "Niger";
    },
    get$ngCountryDisplayName() {
      return "Nigeria";
    },
    get$nuCountryDisplayName() {
      return "Niue";
    },
    get$nfCountryDisplayName() {
      return "Norfolk Island";
    },
    get$kpCountryDisplayName() {
      return "North Korea";
    },
    get$mpCountryDisplayName() {
      return "Northern Mariana Islands";
    },
    get$noCountryDisplayName() {
      return "Norway";
    },
    get$omCountryDisplayName() {
      return "Oman";
    },
    get$pkCountryDisplayName() {
      return "Pakistan";
    },
    get$pwCountryDisplayName() {
      return "Palau";
    },
    get$psCountryDisplayName() {
      return "Palestinian Territories";
    },
    get$paCountryDisplayName() {
      return "Panama";
    },
    get$pgCountryDisplayName() {
      return "Papua New Guinea";
    },
    get$pyCountryDisplayName() {
      return "Paraguay";
    },
    get$peCountryDisplayName() {
      return "Peru";
    },
    get$phCountryDisplayName() {
      return "Philippines";
    },
    get$plCountryDisplayName() {
      return "Poland";
    },
    get$ptCountryDisplayName() {
      return "Portugal";
    },
    get$prCountryDisplayName() {
      return "Puerto Rico";
    },
    get$qaCountryDisplayName() {
      return "Qatar";
    },
    get$reCountryDisplayName() {
      return "R\xe9union";
    },
    get$roCountryDisplayName() {
      return "Romania";
    },
    get$ruCountryDisplayName() {
      return "Russia";
    },
    get$rwCountryDisplayName() {
      return "Rwanda";
    },
    get$blCountryDisplayName() {
      return "Saint Barth\xe9lemy";
    },
    get$shCountryDisplayName() {
      return "Saint Helena";
    },
    get$knCountryDisplayName() {
      return "St. Kitts";
    },
    get$lcCountryDisplayName() {
      return "St. Lucia";
    },
    get$mfCountryDisplayName() {
      return "Saint Martin";
    },
    get$pmCountryDisplayName() {
      return "Saint Pierre and Miquelon";
    },
    get$vcCountryDisplayName() {
      return "St. Vincent";
    },
    get$wsCountryDisplayName() {
      return "Samoa";
    },
    get$smCountryDisplayName() {
      return "San Marino";
    },
    get$stCountryDisplayName() {
      return "S\xe3o Tom\xe9 and Pr\xedncipe";
    },
    get$saCountryDisplayName() {
      return "Saudi Arabia";
    },
    get$snCountryDisplayName() {
      return "Senegal";
    },
    get$rsCountryDisplayName() {
      return "Serbia";
    },
    get$scCountryDisplayName() {
      return "Seychelles";
    },
    get$slCountryDisplayName() {
      return "Sierra Leone";
    },
    get$sgCountryDisplayName() {
      return "Singapore";
    },
    get$sxCountryDisplayName() {
      return "Sint Maarten";
    },
    get$skCountryDisplayName() {
      return "Slovakia";
    },
    get$siCountryDisplayName() {
      return "Slovenia";
    },
    get$sbCountryDisplayName() {
      return "Solomon Islands";
    },
    get$soCountryDisplayName() {
      return "Somalia";
    },
    get$zaCountryDisplayName() {
      return "South Africa";
    },
    get$gsCountryDisplayName() {
      return "South Georgia and the South Sandwich Islands";
    },
    get$krCountryDisplayName() {
      return "South Korea";
    },
    get$ssCountryDisplayName() {
      return "South Sudan";
    },
    get$esCountryDisplayName() {
      return "Spain";
    },
    get$lkCountryDisplayName() {
      return "Sri Lanka";
    },
    get$sdCountryDisplayName() {
      return "Sudan";
    },
    get$srCountryDisplayName() {
      return "Suriname";
    },
    get$sjCountryDisplayName() {
      return "Svalbard and Jan Mayen";
    },
    get$seCountryDisplayName() {
      return "Sweden";
    },
    get$chCountryDisplayName() {
      return "Switzerland";
    },
    get$syCountryDisplayName() {
      return "Syria";
    },
    get$twCountryDisplayName() {
      return "Taiwan";
    },
    get$tjCountryDisplayName() {
      return "Tajikistan";
    },
    get$tzCountryDisplayName() {
      return "Tanzania";
    },
    get$thCountryDisplayName() {
      return "Thailand";
    },
    get$tgCountryDisplayName() {
      return "Togo";
    },
    get$tkCountryDisplayName() {
      return "Tokelau";
    },
    get$toCountryDisplayName() {
      return "Tonga";
    },
    get$ttCountryDisplayName() {
      return "Trinidad/Tobago";
    },
    get$tnCountryDisplayName() {
      return "Tunisia";
    },
    get$trCountryDisplayName() {
      return "Turkey";
    },
    get$tmCountryDisplayName() {
      return "Turkmenistan";
    },
    get$tcCountryDisplayName() {
      return "Turks and Caicos Islands";
    },
    get$tvCountryDisplayName() {
      return "Tuvalu";
    },
    get$viCountryDisplayName() {
      return "U.S. Virgin Islands";
    },
    get$ugCountryDisplayName() {
      return "Uganda";
    },
    get$uaCountryDisplayName() {
      return "Ukraine";
    },
    get$aeCountryDisplayName() {
      return "United Arab Emirates";
    },
    get$gbCountryDisplayName() {
      return "United Kingdom";
    },
    get$usCountryDisplayName() {
      return "United States";
    },
    get$uyCountryDisplayName() {
      return "Uruguay";
    },
    get$uzCountryDisplayName() {
      return "Uzbekistan";
    },
    get$vuCountryDisplayName() {
      return "Vanuatu";
    },
    get$vaCountryDisplayName() {
      return "Vatican City";
    },
    get$veCountryDisplayName() {
      return "Venezuela";
    },
    get$vnCountryDisplayName() {
      return "Vietnam";
    },
    get$wfCountryDisplayName() {
      return "Wallis and Futuna";
    },
    get$ehCountryDisplayName() {
      return "Western Sahara";
    },
    get$yeCountryDisplayName() {
      return "Yemen";
    },
    get$zmCountryDisplayName() {
      return "Zambia";
    },
    get$zwCountryDisplayName() {
      return "Zimbabwe";
    },
    get$pay() {
      return "Pay";
    },
    get$copyClassCodeDesc() {
      return "Users who are already in the app can 'Join space' via the main menu.";
    },
    invitedToSpace$2(space, user) {
      return user + " has invited you to join a space: " + space + "! Do you wish to accept?";
    },
    get$declinedInvitation() {
      return "Declined invitation";
    },
    get$acceptedInvitation() {
      return "Accepted invitation";
    },
    get$youreInvited() {
      return "\ud83d\udce9 You're invited!";
    },
    invitedToChat$2($name, user) {
      return user + " has invited you to join a chat: " + $name + "! Do you wish to accept?";
    },
    get$monthlySubscription() {
      return "Monthly";
    },
    get$yearlySubscription() {
      return "Yearly";
    },
    get$defaultSubscription() {
      return "Pangea Chat Subscription";
    },
    get$freeTrial() {
      return "Free Trial";
    },
    get$noDataFound() {
      return "No data found";
    },
    promoSubscriptionExpirationDesc$1(expiration) {
      return "Your current subscription is promotional and expires on " + expiration + ". Message support@pangea.chat for help changing your subscription.";
    },
    get$blurMeansTranslateTitle() {
      return "Why is the message blurred?";
    },
    get$blurMeansTranslateBody() {
      return "While Immersion Mode is on, messages that are sent in your base language will be blurred while Pangea Bot translates them to your target language. Immersion Mode can be toggled in individual and space settings.";
    },
    get$someErrorTitle() {
      return "Hm, something's not right";
    },
    get$someErrorBody() {
      return "It could be an error or something in your base language.";
    },
    get$bestCorrectionFeedback() {
      return "That's correct!";
    },
    get$distractorFeedback() {
      return "That's not quite right.";
    },
    get$bestAnswerFeedback() {
      return "That's correct!";
    },
    get$definitionDefaultPrompt() {
      return "What does this word mean?";
    },
    get$practiceDefaultPrompt() {
      return "What is the best answer?";
    },
    get$correctionDefaultPrompt() {
      return "What is the best replacement?";
    },
    get$why() {
      return "Why?";
    },
    get$definition() {
      return "Definition";
    },
    get$exampleSentence() {
      return "Example Sentence";
    },
    get$reportToTeacher() {
      return "Who do you want to report this message to?";
    },
    reportMessageTitle$3(reportingUserId, reportedUserId, roomName) {
      return reportingUserId + " has reported a message from " + reportedUserId + " in the chat " + roomName;
    },
    reportMessageBody$2(reportedMessage, reason) {
      return "Message: " + reportedMessage + "\nReason: " + reason;
    },
    get$noTeachersFound() {
      return "No teachers found to report to";
    },
    get$pleaseEnterANumber() {
      return "Please enter a number greater than 0";
    },
    get$archiveRoomDescription() {
      return "The chat will be moved to the archive for yourself and other non-admin users.";
    },
    get$roomUpgradeDescription() {
      return "The chat will then be recreated with the new room version. All participants will be notified that they need to switch to the new chat. You can find out more about room versions at https://spec.matrix.org/latest/rooms/";
    },
    get$removeDevicesDescription() {
      return "You will be logged out of this device and will no longer be able to receive messages.";
    },
    get$banUserDescription() {
      return "The user will be banned from the chat and will not be able to enter the chat again until they are unbanned.";
    },
    get$unbanUserDescription() {
      return "The user will be able to enter the chat again if they try.";
    },
    get$kickUserDescription() {
      return "The user is kicked out of the chat but not banned. In public chats, the user can rejoin at any time.";
    },
    get$makeAdminDescription() {
      return "Once you make this user admin, you may not be able to undo this as they will then have the same permissions as you.";
    },
    get$yourGlobalUserIdIs() {
      return "Your global user-ID is: ";
    },
    noUsersFoundWithQuery$1(query) {
      return 'Unfortunately no user could be found with "' + query + '". Please check whether you made a typo.';
    },
    get$knocking() {
      return "Knocking";
    },
    chatCanBeDiscoveredViaSearchOnServer$1(server) {
      return "Chat can be discovered via the search on " + server;
    },
    get$searchChatsRooms() {
      return "Search for #chats, @users...";
    },
    trialExpiration$1(expiration) {
      return "Your free trial expires on " + expiration;
    },
    get$freeTrialDesc() {
      return "New users recieve a one week free trial of Pangea Chat";
    },
    get$activateTrial() {
      return "Free 7-Day Trial";
    },
    get$successfullySubscribed() {
      return "You have successfully subscribed!";
    },
    get$clickToManageSubscription() {
      return "Click here to manage your subscription.";
    },
    get$nothingFound() {
      return "Nothing found...";
    },
    get$wrongRecoveryKey() {
      return "Sorry... this does not seem to be the correct recovery key.";
    },
    get$startConversation() {
      return "Start conversation";
    },
    get$commandHint_sendraw() {
      return "Send raw json";
    },
    get$searchForUsers() {
      return "Search for @users...";
    },
    get$pleaseEnterYourCurrentPassword() {
      return "Please enter your current password";
    },
    get$newPassword() {
      return "New password";
    },
    get$pleaseChooseAStrongPassword() {
      return "Please choose a strong password";
    },
    get$passwordsDoNotMatch() {
      return "Passwords do not match";
    },
    get$passwordIsWrong() {
      return "Your entered password is wrong";
    },
    get$publicChatAddresses() {
      return "Public chat addresses";
    },
    get$createNewAddress() {
      return "Create new address";
    },
    get$joinSpace() {
      return "Join space";
    },
    get$publicSpaces() {
      return "Public spaces";
    },
    get$decline() {
      return "Decline";
    },
    get$thisDevice() {
      return "This device:";
    },
    get$initAppError() {
      return "An error occured while init the app";
    },
    get$userRole() {
      return "User role";
    },
    searchIn$1(chat) {
      return 'Search in chat "' + chat + '"...';
    },
    get$searchMore() {
      return "Search more...";
    },
    get$gallery() {
      return "Gallery";
    },
    get$files(_) {
      return "Files";
    },
    sessionLostBody$2(url, error) {
      return "Your session is lost. Please report this error to the developers at " + url + ". The error message is: " + error;
    },
    restoreSessionBody$2(url, error) {
      return "The app now tries to restore your session from the backup. Please report this error to the developers at " + url + ". The error message is: " + error;
    },
    forwardMessageTo$1(roomName) {
      return "Forward message to " + roomName + "?";
    },
    get$signUp() {
      return "Sign up";
    },
    pleaseChooseAtLeastChars$1(min) {
      return "Please choose at least " + min + " characters.";
    },
    get$pleaseEnterValidEmail() {
      return "Please enter a valid email address.";
    },
    get$pleaseChooseAUsername() {
      return "Please choose a username";
    },
    get$sendReadReceipts() {
      return "Send read receipts";
    },
    get$sendTypingNotificationsDescription() {
      return "Other participants in a chat can see when you are typing a new message.";
    },
    get$sendReadReceiptsDescription() {
      return "Other participants in a chat can see when you have read a message.";
    },
    get$verifyOtherDevice() {
      return "\ud83d\udd10 Verify other device";
    },
    get$verifyOtherDeviceDescription() {
      return "When you verify another device, those devices can exchange keys, increasing your overall security. \ud83d\udcaa When you start a verification, a popup will appear in the app on both devices. There you will then see a series of emojis or numbers that you have to compare with each other. It's best to have both devices handy before you start the verification. \ud83e\udd33";
    },
    acceptedKeyVerification$1(sender) {
      return sender + " accepted key verification";
    },
    canceledKeyVerification$1(sender) {
      return sender + " canceled key verification";
    },
    completedKeyVerification$1(sender) {
      return sender + " completed key verification";
    },
    isReadyForKeyVerification$1(sender) {
      return sender + " is ready for key verification";
    },
    requestedKeyVerification$1(sender) {
      return sender + " requested key verification";
    },
    startedKeyVerification$1(sender) {
      return sender + " started key verification";
    },
    get$trialPeriodExpired() {
      return "Your trial period has expired";
    },
    get$subscribedToUnlockTools() {
      return "Subscribe to unlock interactive translation and grammar checking, audio playback, personalized practice activities, and learning analytics!";
    },
    get$translationTooltip() {
      return "Translate";
    },
    get$audioTooltip() {
      return "Play Audio";
    },
    get$speechToTextTooltip() {
      return "Transcript";
    },
    get$kickBotWarning() {
      return "Kicking Pangea Bot will remove the conversation bot from this chat.";
    },
    get$stickers() {
      return "Stickers";
    },
    get$discover() {
      return "Discover";
    },
    get$commandHint_ignore() {
      return "Ignore the given matrix ID";
    },
    get$commandHint_unignore() {
      return "Unignore the given matrix ID";
    },
    get$accuracy(_) {
      return "Accuracy";
    },
    get$conversationBotModeSelectDescription() {
      return "Chat activity";
    },
    get$conversationBotModeSelectOption_discussion() {
      return "Discussion";
    },
    get$conversationBotModeSelectOption_custom() {
      return "Custom";
    },
    get$conversationBotDiscussionZone_discussionTopicPlaceholder() {
      return "Set discussion topic";
    },
    get$conversationBotDiscussionZone_discussionKeywordsPlaceholder() {
      return "Set discussion keywords";
    },
    get$conversationBotCustomZone_customSystemPromptPlaceholder() {
      return "Set custom system prompt";
    },
    get$botConfig() {
      return "Bot and activity settings";
    },
    get$botConfigNoPermissionTitle() {
      return "No permission";
    },
    get$botConfigNoPermissionMessage() {
      return "Contact room admin to change bot configuration";
    },
    get$conversationBotStatus() {
      return "Invite bot";
    },
    get$updatePhoneOS() {
      return "You may need to update your device's OS version.";
    },
    get$wordsPerMinute() {
      return "Words per minute";
    },
    get$autoIGCToolName() {
      return "Run language assistance automatically";
    },
    get$autoIGCToolDescription() {
      return "Automatically run language assistance after typing messages";
    },
    get$leaveRoomDescription() {
      return "The chat will be moved to the archive. Other users will be able to see that you have left the chat.";
    },
    get$leaveSpaceDescription() {
      return "All chats within this space will be moved to the archive. Other users will be able to see that you have left the space.";
    },
    get$onlyAdminDescription() {
      return "Since there are no other admins, all other participants will also be removed.";
    },
    get$tooltipInstructionsTitle() {
      return "Not sure what that does?";
    },
    get$tooltipInstructionsBrowserBody() {
      return "Hover over items to view tooltips.";
    },
    get$chatCapacity() {
      return "Chat capacity";
    },
    get$spaceCapacity() {
      return "Space capacity";
    },
    get$roomFull() {
      return "This room is already at capacity.";
    },
    get$chatCapacityHasBeenChanged() {
      return "Chat capacity changed";
    },
    get$spaceCapacityHasBeenChanged() {
      return "Space capacity changed";
    },
    get$chatCapacitySetTooLow() {
      return "Chat capacity cannot be set below the current number of non-admins.";
    },
    get$spaceCapacitySetTooLow() {
      return "Space capacity cannot be set below the current number of non-admins.";
    },
    get$chatCapacityExplanation() {
      return "Chat capacity limits the number of non-admins allowed in a chat.";
    },
    get$spaceCapacityExplanation() {
      return "Space capacity limits the number of non-admins allowed in a space.";
    },
    get$chatExceedsCapacity() {
      return "This chat exceeds its capacity.";
    },
    get$spaceExceedsCapacity() {
      return "This space exceeds its capacity.";
    },
    get$tooManyRequest() {
      return "Too many request, please try again later.";
    },
    get$enterNumber() {
      return "Please enter a whole number value.";
    },
    get$buildTranslation() {
      return "Build your translation from the choices above";
    },
    thereAreCountUsersBlocked$1(count) {
      return "Right now there are " + count + " users blocked.";
    },
    get$restricted() {
      return "Restricted";
    },
    get$knockRestricted() {
      return "Knock restricted";
    },
    get$createNewSpace() {
      return "Nov\xfd prostor";
    },
    get$practice() {
      return "Practice";
    },
    get$speechToTextBody() {
      return "See how well you did by looking at your Accuracy and Words Per Minute scores";
    },
    get$versionNotFound() {
      return "Version Not Found";
    },
    get$fetchingVersion() {
      return "Fetching version...";
    },
    get$versionFetchError() {
      return "Error fetching version";
    },
    versionText$2(version, buildNumber) {
      return "Version: " + version + "+" + buildNumber;
    },
    get$l1TranslationBody() {
      return "Messages in your base language will not be translated.";
    },
    get$continueText() {
      return "Continue";
    },
    get$deleteSubscriptionWarningTitle() {
      return "You have an active subscription";
    },
    get$deleteSubscriptionWarningBody() {
      return "Deleting your account will not automatically cancel your subscription.";
    },
    get$manageSubscription() {
      return "Manage Subscription";
    },
    get$createChat() {
      return "Create chat";
    },
    get$error520Title() {
      return "Please try again.";
    },
    get$error520Desc() {
      return "Sorry, we could not understand your message...";
    },
    get$level(_) {
      return "Level";
    },
    get$translationChoicesBody() {
      return "Click and hold an option for a hint.";
    },
    get$sendCanceled() {
      return "Sending canceled";
    },
    goToSpace$1(space) {
      return "Go to space: " + space;
    },
    get$markAsUnread() {
      return "Mark as unread";
    },
    userLevel$1(level) {
      return "" + level + " - User";
    },
    moderatorLevel$1(level) {
      return "" + level + " - Moderator";
    },
    adminLevel$1(level) {
      return "" + level + " - Admin";
    },
    get$changeGeneralChatSettings() {
      return "Change general chat settings";
    },
    get$inviteOtherUsers() {
      return "Invite other users to this chat";
    },
    get$changeTheChatPermissions() {
      return "Change the chat permissions";
    },
    get$changeTheVisibilityOfChatHistory() {
      return "Change the visibility of the chat history";
    },
    get$changeTheCanonicalRoomAlias() {
      return "Change the main public chat address";
    },
    get$sendRoomNotifications() {
      return "Send a @room notifications";
    },
    get$changeTheDescriptionOfTheGroup() {
      return "Change the description of the chat";
    },
    get$chatPermissionsDescription() {
      return "Define which power level is necessary for certain actions in this chat. The power levels 0, 50 and 100 are usually representing users, moderators and admins, but any gradation is possible.";
    },
    updateInstalled$1(version) {
      return "\ud83c\udf89 Update " + version + " installed!";
    },
    get$doesNotSeemToBeAValidHomeserver() {
      return "Doesn't seem to be a compatible homeserver. Wrong URL?";
    },
    get$grammar() {
      return "Grammar";
    },
    get$contactHasBeenInvitedToTheChat() {
      return "Contact has been invited to the chat";
    },
    get$inviteChat() {
      return "\ud83d\udce8 Invite chat";
    },
    get$chatName() {
      return "Chat name";
    },
    get$clickTheWordAgainToDeselect() {
      return "Click the selected word to deselect it.";
    },
    get$l2SupportNa() {
      return "Not Available";
    },
    get$l2SupportAlpha() {
      return "Alpha";
    },
    get$l2SupportBeta() {
      return "Beta";
    },
    get$l2SupportFull() {
      return "Full";
    },
    get$missingVoiceTitle() {
      return "Missing voice";
    },
    get$voiceNotAvailable() {
      return "You don't have a voice installed for this language.";
    },
    get$playAudio() {
      return "Play";
    },
    get$stop(_) {
      return "Stop";
    },
    get$grammarCopyPOSsconj() {
      return "Subordinating Conjunction";
    },
    get$grammarCopyPOSnum() {
      return "Number";
    },
    get$grammarCopyPOSverb() {
      return "Verb";
    },
    get$grammarCopyPOSaffix() {
      return "Affix";
    },
    get$grammarCopyPOSpart() {
      return "Particle";
    },
    get$grammarCopyPOSadj() {
      return "Adjective";
    },
    get$grammarCopyPOScconj() {
      return "Coordinating Conjunction";
    },
    get$grammarCopyPOSpunct() {
      return "Punctuation";
    },
    get$grammarCopyPOSadv() {
      return "Adverb";
    },
    get$grammarCopyPOSaux() {
      return "Auxiliary";
    },
    get$grammarCopyPOSspace() {
      return "Space";
    },
    get$grammarCopyPOSsym() {
      return "Symbol";
    },
    get$grammarCopyPOSdet() {
      return "Determiner";
    },
    get$grammarCopyPOSpron() {
      return "Pronoun";
    },
    get$grammarCopyPOSadp() {
      return "Adposition";
    },
    get$grammarCopyPOSpropn() {
      return "Proper Noun";
    },
    get$grammarCopyPOSnoun() {
      return "Noun";
    },
    get$grammarCopyPOSintj() {
      return "Interjection";
    },
    get$grammarCopyPOSx() {
      return "Other";
    },
    get$grammarCopyGENDERfem() {
      return "Feminine";
    },
    get$grammarCopyPERSON2() {
      return "Second Person";
    },
    get$grammarCopyMOODimp() {
      return "Imperative";
    },
    get$grammarCopyPUNCTTYPEqest() {
      return "Question";
    },
    get$grammarCopyASPECTperf() {
      return "Perfect";
    },
    get$grammarCopyCASEaccnom() {
      return "Accusative, Nominative";
    },
    get$grammarCopyCASEobl() {
      return "Oblique";
    },
    get$grammarCopyVOICEact() {
      return "Active";
    },
    get$grammarCopyPUNCTTYPEbrck() {
      return "Bracket";
    },
    get$grammarCopyNOUNTYPEart() {
      return "Article";
    },
    get$grammarCopyNUMBERsing() {
      return "Singular";
    },
    get$grammarCopyGENDERmasc() {
      return "Masculine";
    },
    get$grammarCopyVERBTYPEmod() {
      return "Modal";
    },
    get$grammarCopyADVTYPEadverbial() {
      return "Adverbial";
    },
    get$grammarCopyTENSEperi() {
      return "Periphrastic";
    },
    get$grammarCopyNUMFORMdigit() {
      return "Digit";
    },
    get$grammarCopyNOUNTYPEnot_proper() {
      return "Not Proper";
    },
    get$grammarCopyNUMTYPEcard() {
      return "Cardinal";
    },
    get$grammarCopyNOUNTYPEprop() {
      return "Proper";
    },
    get$grammarCopyPUNCTTYPEdash() {
      return "Dash";
    },
    get$grammarCopyPUNCTTYPEyes() {
      return "Yes";
    },
    get$grammarCopyPUNCTTYPEsemi() {
      return "Semicolon";
    },
    get$grammarCopyPUNCTTYPEcomm() {
      return "Comma";
    },
    get$grammarCopyMOODcnd() {
      return "Conditional";
    },
    get$grammarCopyCASEacc() {
      return "Accusative";
    },
    get$grammarCopyPARTTYPEpart() {
      return "Partitive";
    },
    get$grammarCopyTENSEpast() {
      return "Past";
    },
    get$grammarCopyDEGREEsup() {
      return "Superlative";
    },
    get$grammarCopyPUNCTTYPEcolo() {
      return "Colon";
    },
    get$grammarCopyPERSON3() {
      return "Third Person";
    },
    get$grammarCopyNUMBERplur() {
      return "Plural";
    },
    get$grammarCopyPRONTYPEnpr() {
      return "Proper Noun";
    },
    get$grammarCopyPRONTYPEinterrogative() {
      return "Interrogative";
    },
    get$grammarCopyPOLITEinfm() {
      return "Informal";
    },
    get$grammarCopyADVTYPEtim() {
      return "Time";
    },
    get$grammarCopyPOLARITYneg() {
      return "Negative";
    },
    get$grammarCopyNUMTYPEtot() {
      return "Total";
    },
    get$grammarCopyADVTYPEadnomial() {
      return "Adnominal";
    },
    get$grammarCopyASPECTprog() {
      return "Progressive";
    },
    get$grammarCopyMOODsub() {
      return "Subjunctive";
    },
    get$grammarCopyVERBFORMcomplementive() {
      return "Complementive";
    },
    get$grammarCopyCASEnom() {
      return "Nominative";
    },
    get$grammarCopyTENSEfut() {
      return "Future";
    },
    get$grammarCopyCASEdat() {
      return "Dative";
    },
    get$grammarCopyTENSEpres() {
      return "Present";
    },
    get$grammarCopyGENDERneut() {
      return "Neuter";
    },
    get$grammarCopyPRONTYPErel() {
      return "Relative";
    },
    get$grammarCopyVERBFORMfinalEnding() {
      return "Final Ending";
    },
    get$grammarCopyPRONTYPEdem() {
      return "Demonstrative";
    },
    get$grammarCopyPREPCASEpre() {
      return "Prepositional";
    },
    get$grammarCopyVERBFORMfin() {
      return "Finite";
    },
    get$grammarCopyDEGREEpos() {
      return "Positive";
    },
    get$grammarCopyPUNCTTYPEquot() {
      return "Quotation";
    },
    get$grammarCopyVERBFORMger() {
      return "Gerund";
    },
    get$grammarCopyVOICEpass() {
      return "Passive";
    },
    get$grammarCopyCASEgen() {
      return "Genitive";
    },
    get$grammarCopyTENSEprs() {
      return "Present";
    },
    get$grammarCopyDEFINITEdef() {
      return "Definite";
    },
    get$grammarCopyNUMTYPEord() {
      return "Ordinal";
    },
    get$grammarCopyCASEins() {
      return "Instrumental";
    },
    get$grammarCopyVERBFORMinf() {
      return "Infinitive";
    },
    get$grammarCopyNUMFORMlong() {
      return "Long";
    },
    get$grammarCopyCASEloc() {
      return "Locative";
    },
    get$grammarCopyMOODind() {
      return "Indicative";
    },
    get$grammarCopyDEGREEcmp() {
      return "Comparative";
    },
    get$grammarCopyCASErelativeCase() {
      return "Relative";
    },
    get$grammarCopyPUNCTTYPEexcl() {
      return "Exclamative";
    },
    get$grammarCopyPERSON1() {
      return "First Person";
    },
    get$grammarCopyPUNCTSIDEini() {
      return "Initial";
    },
    get$grammarCopyGENDERperson() {
      return "Person";
    },
    get$grammarCopyFOREIGNyes() {
      return "Foreign";
    },
    get$grammarCopyVOICEvoice() {
      return "Voice";
    },
    get$grammarCopyVERBTYPEverbType() {
      return "Verb";
    },
    get$grammarCopyPOSSpass() {
      return "Possessive";
    },
    get$grammarCopyPREPCASEprepCase() {
      return "Prepositional";
    },
    get$grammarCopyNUMTYPEnumType() {
      return "Numeral";
    },
    get$grammarCopyNOUNTYPEnounType() {
      return "Noun";
    },
    get$grammarCopyREFLEXreflex() {
      return "Reflexive";
    },
    get$grammarCopyPRONTYPEpronType() {
      return "Pronoun";
    },
    get$grammarCopyPUNCTSIDEpunctSide() {
      return "Punctuation Side";
    },
    get$grammarCopyVERBFORMverbForm() {
      return "Verb";
    },
    get$grammarCopyGENDERgender() {
      return "Gender";
    },
    get$grammarCopyMOODmood() {
      return "Mood";
    },
    get$grammarCopyASPECTaspect() {
      return "Aspect";
    },
    get$grammarCopyPUNCTTYPEpunctType() {
      return "Punctuation";
    },
    get$grammarCopyTENSEtense() {
      return "Tense";
    },
    get$grammarCopyDEGREEdegree() {
      return "Degree";
    },
    get$grammarCopyPOLITEpolite() {
      return "Politeness";
    },
    get$grammarCopyADVTYPEadvType() {
      return "Adverb";
    },
    get$grammarCopyNUMFORMnumber() {
      return "Number";
    },
    get$grammarCopyCONJTYPEconjType() {
      return "Conjunction";
    },
    get$grammarCopyPOLARITYpolarity() {
      return "Polarity";
    },
    get$grammarCopyCASEcase() {
      return "Case";
    },
    get$grammarCopyDEFINITEdefinite() {
      return "Definiteness";
    },
    get$grammarCopyNUMFORMnumForm() {
      return "Numeral";
    },
    get$grammarCopyPRONTYPEadn() {
      return "Adnominal";
    },
    get$grammarCopyVOCvoc() {
      return "Vocative";
    },
    get$grammarCopyCMPLcmpl() {
      return "Complementizer";
    },
    get$grammarCopyADVadv() {
      return "Adverbial";
    },
    get$grammarCopyMOODjus() {
      return "Jussive";
    },
    get$grammarCopyGENDERcom() {
      return "Common";
    },
    get$grammarCopyREFLEXrflx() {
      return "Reflexive";
    },
    get$grammarCopyPARTTYPEpar() {
      return "Partitive";
    },
    get$grammarCopySPCspc() {
      return "Specific";
    },
    get$grammarCopyTENSEpqp() {
      return "Pluperfect";
    },
    get$grammarCopyREFLEXref() {
      return "Reflexive";
    },
    get$grammarCopyPUNCTTYPEnshrt() {
      return "Short";
    },
    get$grammarCopyNUMBERdual() {
      return "Dual";
    },
    get$grammarCopyNUMFORMlng() {
      return "Long";
    },
    get$grammarCopyVOICEmid() {
      return "Middle";
    },
    get$grammarCopyINTRELintRel() {
      return "Interrogative, Relative";
    },
    get$grammarCopyINTint() {
      return "Interrogative";
    },
    get$grammarCopyVOICEcaus() {
      return "Causative";
    },
    get$grammarCopyUnknown() {
      return "Unknown";
    },
    get$grammarCopyEVIDENTevident() {
      return "Evidentiality";
    },
    get$grammarCopyNUMFORMnumberPsor() {
      return "Possessor's Number";
    },
    get$grammarCopyASPECThab() {
      return "Habitual";
    },
    get$grammarCopyCASEabl() {
      return "Ablative";
    },
    get$grammarCopyCASEall() {
      return "Allative";
    },
    get$grammarCopyCASEess() {
      return "Essive";
    },
    get$grammarCopyCASEtra() {
      return "Translative";
    },
    get$grammarCopyCASEequ() {
      return "Equative";
    },
    get$grammarCopyCASEdis() {
      return "Distributive";
    },
    get$grammarCopyCASEabs() {
      return "Absolutive";
    },
    get$grammarCopyCASEerg() {
      return "Ergative";
    },
    get$grammarCopyCASEcau() {
      return "Causal";
    },
    get$grammarCopyCASEben() {
      return "Benefactive";
    },
    get$grammarCopyCASEtem() {
      return "Temporal";
    },
    get$grammarCopyCONJTYPEcoord() {
      return "Coordinating";
    },
    get$grammarCopyDEFINITEcons() {
      return "Construct State";
    },
    get$grammarCopyDEGREEabs() {
      return "Absolute Degree";
    },
    get$grammarCopyEVIDENTfh() {
      return "Factual Evidentiality";
    },
    get$grammarCopyEVIDENTnfh() {
      return "Non-factual Evidentiality";
    },
    get$grammarCopyMOODopt() {
      return "Optative";
    },
    get$grammarCopyMOODadm() {
      return "Admirative";
    },
    get$grammarCopyMOODdes() {
      return "Desiderative";
    },
    get$grammarCopyMOODnec() {
      return "Necessitative";
    },
    get$grammarCopyMOODpot() {
      return "Potential";
    },
    get$grammarCopyMOODprp() {
      return "Propositive";
    },
    get$grammarCopyMOODqot() {
      return "Quotative";
    },
    get$grammarCopyNUMFORMword() {
      return "Word Form";
    },
    get$grammarCopyNUMFORMroman() {
      return "Roman Numeral";
    },
    get$grammarCopyNUMFORMletter() {
      return "Letter Form";
    },
    get$grammarCopyNUMTYPEmult() {
      return "Multiplicative";
    },
    get$grammarCopyNUMTYPEfrac() {
      return "Fractional";
    },
    get$grammarCopyNUMTYPEsets() {
      return "Set";
    },
    get$grammarCopyNUMTYPErange() {
      return "Range";
    },
    get$grammarCopyNUMTYPEdist() {
      return "Distributive";
    },
    get$grammarCopyNUMBERtri() {
      return "Trial";
    },
    get$grammarCopyNUMBERpauc() {
      return "Paucal";
    },
    get$grammarCopyNUMBERgrpa() {
      return "Greater Paucal";
    },
    get$grammarCopyNUMBERgrpl() {
      return "Greater Plural";
    },
    get$grammarCopyNUMBERinv() {
      return "Inverse";
    },
    get$grammarCopyPERSON0() {
      return "Zero";
    },
    get$grammarCopyPERSON4() {
      return "Fourth";
    },
    get$grammarCopyPOLITEform() {
      return "Formal";
    },
    get$grammarCopyPOLITEelev() {
      return "Elevated";
    },
    get$grammarCopyPOLITEhumb() {
      return "Humble";
    },
    get$grammarCopyPRONTYPEemp() {
      return "Emphatic";
    },
    get$grammarCopyPRONTYPEexc() {
      return "Exclamative";
    },
    get$grammarCopyPRONTYPErcp() {
      return "Reciprocal";
    },
    get$grammarCopyPRONTYPEintRelPronType() {
      return "Interrogative-Relative";
    },
    get$grammarCopyTENSEaor() {
      return "Aorist";
    },
    get$grammarCopyTENSEeps() {
      return "Epistemic";
    },
    get$grammarCopyTENSEprosp() {
      return "Prospective";
    },
    get$grammarCopyVERBFORMpart() {
      return "Participle";
    },
    get$grammarCopyVERBFORMconv() {
      return "Converb";
    },
    get$grammarCopyVERBFORMvnoun() {
      return "Verbal Noun";
    },
    get$grammarCopyVOICEantip() {
      return "Antipassive";
    },
    get$grammarCopyVOICEcauVoice() {
      return "Causative";
    },
    get$grammarCopyVOICedir() {
      return "Direct";
    },
    get$grammarCopyVOICEinvVoice() {
      return "Inverse";
    },
    get$grammarCopyVOICErcpVoice() {
      return "Reciprocal";
    },
    get$grammarCopyPOS() {
      return "Part of Speech";
    },
    get$grammarCopyGENDER() {
      return "Gender";
    },
    get$grammarCopyPERSON() {
      return "Person";
    },
    get$grammarCopyMOOD() {
      return "Mood";
    },
    get$grammarCopyPUNCTTYPE() {
      return "Punctuation Type";
    },
    get$grammarCopyASPECT() {
      return "Aspect";
    },
    get$grammarCopyCASE() {
      return "Case";
    },
    get$grammarCopyVOICE() {
      return "Voice";
    },
    get$grammarCopyNOUNTYPE() {
      return "Noun Type";
    },
    get$grammarCopyVERBTYPE() {
      return "Verb Type";
    },
    get$grammarCopyADVTYPE() {
      return "Adverb Type";
    },
    get$grammarCopyNUMFORM() {
      return "Numeral Form";
    },
    get$grammarCopyNUMTYPE() {
      return "Numeral Type";
    },
    get$grammarCopyNUMBER() {
      return "Number";
    },
    get$grammarCopyDEFINITE() {
      return "Definiteness";
    },
    get$grammarCopyDEGREE() {
      return "Degree";
    },
    get$grammarCopyEVIDENT() {
      return "Evidentiality";
    },
    get$grammarCopyFOREIGN() {
      return "Foreign";
    },
    get$grammarCopyPOLARITY() {
      return "Polarity";
    },
    get$grammarCopyPOLITE() {
      return "Politeness";
    },
    get$grammarCopyPREPCASE() {
      return "Prepositional Case";
    },
    get$grammarCopyPRONTYPE() {
      return "Pronoun Type";
    },
    get$grammarCopyPUNCTSIDE() {
      return "Punctuation Side";
    },
    get$grammarCopyREFLEX() {
      return "Reflexive";
    },
    get$grammarCopyTENSE() {
      return "Tense";
    },
    get$grammarCopyVERBFORM() {
      return "Verb Form";
    },
    get$grammarCopyCONJTYPE() {
      return "Conjunction Type";
    },
    get$grammarCopyNUMBERPSOR() {
      return "Possessor's Number";
    },
    get$grammarCopyPOSS() {
      return "Possessive";
    },
    get$grammarCopyCASEaccdat() {
      return "Accusative-Dative";
    },
    get$grammarCopyDEFINITEind() {
      return "Indefinite";
    },
    get$grammarCopyNOUNTYPEcomm() {
      return "Common Noun";
    },
    get$grammarCopyNUMBERPSORsing() {
      return "Possessor's Singular";
    },
    get$grammarCopyNUMBERPSORplur() {
      return "Possessor's Plural";
    },
    get$grammarCopyNUMBERPSORdual() {
      return "Possessor's Dual";
    },
    get$grammarCopyPOSSyes() {
      return "Possessive";
    },
    get$grammarCopyPREPCASEnpr() {
      return "Non-prepositional";
    },
    get$grammarCopyPRONTYPEprs() {
      return "Personal";
    },
    get$grammarCopyPRONTYPEint() {
      return "Interrogative";
    },
    get$grammarCopyPRONTYPEtot() {
      return "Total";
    },
    get$grammarCopyPRONTYPEneg() {
      return "Negative";
    },
    get$grammarCopyPRONTYPEart() {
      return "Article";
    },
    get$grammarCopyPRONTYPEind() {
      return "Indefinite";
    },
    get$grammarCopyPRONTYPEintrel() {
      return "Interrogative-Relative";
    },
    get$grammarCopyPUNCTSIDEfin() {
      return "Final Punctuation";
    },
    get$grammarCopyPUNCTTYPEperi() {
      return "Period";
    },
    get$grammarCopyREFLEXyes() {
      return "Reflexive";
    },
    get$grammarCopyTENSEimp() {
      return "Imperfect";
    },
    get$enterPrompt() {
      return "Please enter a system prompt";
    },
    get$selectBotLanguage() {
      return "Select bot language";
    },
    get$chooseVoice() {
      return "Choose a voice";
    },
    get$enterLanguageLevel() {
      return "Please enter a language level";
    },
    get$enterDiscussionTopic() {
      return "Please enter a discussion topic";
    },
    get$selectBotChatMode() {
      return "Select chat mode";
    },
    get$other() {
      return "Other";
    },
    levelShort$1(level) {
      return "LVL " + level;
    },
    get$botModeValidation() {
      return "Please select a chat mode";
    },
    get$clickBestOption() {
      return "Choose the best options to translate your message!";
    },
    get$unlockedLanguageTools() {
      return "You\u2019ve unlocked the language tools for this message. Try them out by clicking below!";
    },
    get$botSettingsSubtitle() {
      return "Invite bot to moderate chat activity";
    },
    get$noCapacityLimit() {
      return "No capacity limit";
    },
    get$downloadGroupText() {
      return "Download group text";
    },
    get$notificationsOn() {
      return "Notifications on";
    },
    get$notificationsOff() {
      return "Notifications off";
    },
    get$calculatingFileSize() {
      return "Calculating file size...";
    },
    get$prepareSendingAttachment() {
      return "Prepare sending attachment...";
    },
    get$sendingAttachment() {
      return "Sending attachment...";
    },
    sendingAttachmentCountOfCount$2(index, $length) {
      return "Sending attachment " + index + " of " + $length + "...";
    },
    serverLimitReached$1(seconds) {
      return "Server limit reached! Waiting " + seconds + " seconds...";
    },
    get$noticeChatBackupDeviceVerification() {
      return "Note: When you connect all your devices to the chat backup, they are automatically verified.";
    },
    get$requireCodeToJoin() {
      return "Require code to join";
    },
    get$canFindInSearch() {
      return "Can find in search";
    },
    get$addSubspaceWarning() {
      return "Once you add this, it will not appear in public search results, and it will be visible to all members of the parent space.";
    },
    get$nestedSpaceError() {
      return "Spaces should not be added as children of other spaces";
    },
    get$blur(_) {
      return "Blur:";
    },
    get$opacity(_) {
      return "Opacity:";
    },
    get$setWallpaper() {
      return "Set wallpaper";
    },
    get$noContactInformationProvided() {
      return "Server does not provide any valid contact information";
    },
    get$contactServerAdmin() {
      return "Contact server admin";
    },
    get$contactServerSecurity() {
      return "Contact server security";
    },
    get$supportPage() {
      return "Support page";
    },
    get$serverInformation() {
      return "Server information:";
    },
    get$name(_) {
      return "Name";
    },
    get$version(_) {
      return "Version";
    },
    get$compress() {
      return "Compress";
    },
    get$boldText() {
      return "Bold text";
    },
    get$italicText() {
      return "Italic text";
    },
    get$strikeThrough() {
      return "Strikethrough";
    },
    get$pleaseFillOut() {
      return "Please fill out";
    },
    get$invalidUrl() {
      return "Invalid url";
    },
    get$addLink() {
      return "Add link";
    },
    get$unableToJoinChat() {
      return "Unable to join chat. Maybe the other party has already closed the conversation.";
    },
    get$createChatAndInviteUsers() {
      return "Create chat and invite users";
    },
    get$updatedNewSpaceDescription() {
      return "Spaces allow you to consolidate your chats and build private or public communities.";
    },
    get$joinWithCode() {
      return "Join with code";
    },
    get$enterCodeToJoin() {
      return "Enter code to join";
    },
    get$mandatoryUpdateRequired() {
      return "Mandatory Update Required";
    },
    get$updateAvailable() {
      return "Update Available";
    },
    get$mandatoryUpdateRequiredDesc() {
      return "A new version of the app is required to continue. Please update now to proceed.";
    },
    get$updateAvailableDesc() {
      return "A new version of the app is available. Update now for the latest features and improvements!";
    },
    get$updateNow() {
      return "Update Now";
    },
    get$updateLater() {
      return "Later";
    },
    get$constructUseWaDesc() {
      return "Used without help";
    },
    get$constructUseGaDesc() {
      return "Grammar mistake";
    },
    get$constructUseUnkDesc() {
      return "Unknown";
    },
    get$constructUseCorITDesc() {
      return "Correct in translation";
    },
    get$constructUseIgnITDesc() {
      return "Ignored in translation";
    },
    get$constructUseIncITDesc() {
      return "Incorrect in translation";
    },
    get$constructUseIgnIGCDesc() {
      return "Ignored in grammar correction";
    },
    get$constructUseCorIGCDesc() {
      return "Correct in grammar correction";
    },
    get$constructUseIncIGCDesc() {
      return "Incorrect in grammar correction";
    },
    get$constructUseCorPADesc() {
      return "Correct in word meaning activity";
    },
    get$constructUseIgnPADesc() {
      return "Ignored in word meaning activity";
    },
    get$constructUseIncPADesc() {
      return "Incorrect in word meaning activity";
    },
    get$constructUseCorWLDesc() {
      return "Correct in word listening activity";
    },
    get$constructUseIncWLDesc() {
      return "Incorrect in word listening activity";
    },
    get$constructUseIngWLDesc() {
      return "Ignored in word listening activity";
    },
    get$constructUseCorHWLDesc() {
      return "Correct in hidden word activity";
    },
    get$constructUseIncHWLDesc() {
      return "Incorrect in hidden word activity";
    },
    get$constructUseIgnHWLDesc() {
      return "Ignored in hidden word activity";
    },
    get$constructUseCorLDesc() {
      return "Correct in lemma activity";
    },
    get$constructUseIncLDesc() {
      return "Incorrect in lemma activity";
    },
    get$constructUseIgnLDesc() {
      return "Ignored in lemma activity";
    },
    get$constructUseCorMDesc() {
      return "Correct in grammar activity";
    },
    get$constructUseIncMDesc() {
      return "Incorrect in grammar activity";
    },
    get$constructUseIgnMDesc() {
      return "Ignored in grammar activity";
    },
    get$constructUseEmojiDesc() {
      return "Correct in emoji activity";
    },
    get$constructUseNanDesc() {
      return "Not applicable";
    },
    xpIntoLevel$2(currentXP, maxXP) {
      return "" + currentXP + " / " + maxXP + " XP";
    },
    get$enableTTSToolName() {
      return "Enabled text-to-speech";
    },
    get$enableTTSToolDescription() {
      return "Allow the app to generate text-to-speech output for portions of text in your target language";
    },
    get$couldNotFindTTS() {
      return "We couldn't find a text-to-speech engine for your current target language. ";
    },
    get$ttsInstructionsHyperlink() {
      return "Click here to view instructions for downloading a new voice on your device.";
    },
    get$currentVersion() {
      return "Current Version";
    },
    get$latestVersion() {
      return "Latest Version";
    },
    get$createAnAccount() {
      return "Create an account";
    },
    get$signIn() {
      return "Sign in";
    },
    get$signUpWithEmail() {
      return "Sign up with Email";
    },
    get$signUpWithGoogle() {
      return "Sign up with Google";
    },
    get$signUpWithApple() {
      return "Sign up with Apple";
    },
    get$yourUsername() {
      return "Your username";
    },
    get$yourEmail() {
      return "Your email";
    },
    get$signInWithGoogle() {
      return "Sign in with Google";
    },
    get$signInWithApple() {
      return "Sign in with Apple";
    },
    get$chooseYourAvatar() {
      return "Choose your avatar";
    },
    get$iWantToLearn() {
      return "I want to learn";
    },
    get$letsStart() {
      return "Let's start";
    },
    get$pleaseAgreeToTOS() {
      return "Please agree to the Terms and Conditions";
    },
    get$pleaseEnterEmail() {
      return "Please enter a valid email address.";
    },
    get$pleaseSelectALanguage() {
      return "Please select a language";
    },
    get$myBaseLanguage() {
      return "My base language";
    },
    get$clickWordsInstructions() {
      return "Click on a word or the buttons below to learn more";
    },
    get$meaningSectionHeader() {
      return "Meaning:";
    },
    get$formSectionHeader() {
      return "Forms used in chats:";
    },
    get$noEmojiSelectedTooltip() {
      return "No emoji selected";
    },
    get$writingExercisesTooltip() {
      return "Writing exercises";
    },
    get$listeningExercisesTooltip() {
      return "Listening exercises";
    },
    get$readingExercisesTooltip() {
      return "Reading exercises";
    },
    get$meaningNotFound() {
      return "Meaning could not be found.";
    },
    get$formsNotFound() {
      return "Forms could not be found.";
    },
    get$chooseBaseForm() {
      return "Choose the base form";
    },
    get$notTheCodeError() {
      return "Sorry, that's not the code!";
    },
    get$totalXP() {
      return "Total XP";
    },
    get$numLemmas() {
      return "Total number of lemmas";
    },
    get$numLemmasUsedCorrectly() {
      return "Number of lemmas used correctly at least once";
    },
    get$numLemmasUsedIncorrectly() {
      return "Number of lemmas used correctly 0 times";
    },
    get$numLemmasSmallXP() {
      return "Number of lemmas with 0 - 30 XP";
    },
    get$numLemmasMediumXP() {
      return "Number of lemmas with 31 - 200 XP";
    },
    get$numLemmasLargeXP() {
      return "Number of lemmas with > 200 XP";
    },
    get$numGrammarConcepts() {
      return "Number of grammar concepts";
    },
    get$listGrammarConcepts() {
      return "Grammar concepts";
    },
    get$listGrammarConceptsUsedCorrectly() {
      return "Grammar concepts used correctly in original messages at least 80% of the time";
    },
    get$listGrammarConceptsUsedIncorrectly() {
      return "Grammar concepts used correctly in original messages less than 80% of the time";
    },
    get$listGrammarConceptsUseCorrectlySystemGenerated() {
      return "Grammar concepts chosen correctly from system-generated suggestions at least 80% of the time";
    },
    get$listGrammarConceptsUseIncorrectlySystemGenerated() {
      return "Grammar concepts chosen correctly from system-generated suggestions less than 80% of the time";
    },
    get$listGrammarConceptsSmallXP() {
      return "Grammar concepts with 0-50 xp";
    },
    get$listGrammarConceptsMediumXP() {
      return "Grammar concepts with 51-200 xp";
    },
    get$listGrammarConceptsLargeXP() {
      return "Grammar concepts 201-500 xp";
    },
    get$listGrammarConceptsHugeXP() {
      return "Grammar concepts >500 xp";
    },
    get$numMessagesSent() {
      return "Number of messages sent";
    },
    get$numWordsTyped() {
      return "Number of words typed in original messages";
    },
    get$numCorrectChoices() {
      return "Number of correct words chosen from system-generated suggestions";
    },
    get$numIncorrectChoices() {
      return "Number of incorrect words chosen from system-generated suggestions";
    },
    get$downloadSpaceAnalytics() {
      return "Download space analytics";
    },
    get$commaSeparatedFile() {
      return "CSV";
    },
    get$excelFile() {
      return "Excel";
    },
    get$fileType() {
      return "File type";
    },
    get$download(_) {
      return "Download";
    },
    get$analyticsNotAvailable() {
      return "User analytics not available";
    },
    get$downloading() {
      return "Downloading...";
    },
    get$failedFetchUserAnalytics() {
      return "Failed to download user analytics";
    },
    get$downloadComplete() {
      return "Download complete!";
    },
    whatIsTheMorphTag$2(morphologicalFeature, wordForm) {
      return "What is the " + morphologicalFeature + " of '" + wordForm + "'?";
    },
    get$dataAvailable() {
      return "Data availability";
    },
    get$available(_) {
      return "Available";
    },
    get$pangeaBotIsFallible() {
      return "Pangea Bot makes mistakes too!";
    },
    whatIsMeaning$2(lemma, partOfSpeech) {
      return "What does '" + lemma + "' mean?";
    },
    pickAnEmoji$2(lemma, partOfSpeech) {
      return "What's your favorite emoji for '" + lemma + "'?";
    },
    get$lemmaMeaningInstructionsBody() {
      return "Above is the meaning of the lemma. Double-click to edit.";
    },
    get$doubleClickToEdit() {
      return "Double-click to edit.";
    },
    get$notInClass() {
      return "Not in a class!";
    },
    get$noClassCode() {
      return "No class code!";
    },
    remove$1($receiver, arg0) {
      return this.get$remove(this).call$1(arg0);
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B.L10nCs, C.L10n);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"L10nCs":{"L10n":[]}}'));
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_205", e: "endPart", h: h});
})($__dart_deferred_initializers__, "fmg3o5uBTOHQUp1kGzzksiYQxB0=");
;
//# sourceMappingURL=main.dart.js_205.part.js.map
